angular.module('ccc-app').directive('coinInfoBox',[function(){return{restrict:'E',templateUrl:'general/coin-info-box.html',controller:['$scope','pageInfo','subscriptionManager',function($scope,pageInfo,subscriptionManager){$scope.tabsCoinInfoBox=[{internal:0,name:'Details'},{internal:1,name:'ICO'},{internal:2,name:'Features'},{internal:3,name:'Technology'},{internal:4,name:'Historical Price'}];$scope.pageInfo=pageInfo;$scope.getIdForInternalId=function(intrenalId){for(var i=0;i<$scope.tabsCoinInfoBox.length;i++){if($scope.tabsCoinInfoBox[i].internal==intrenalId){return i;}}
return 1;}
if(pageInfo.isICOStage()){var temp=$scope.tabsCoinInfoBox[0];$scope.tabsCoinInfoBox[0]=$scope.tabsCoinInfoBox[1];$scope.tabsCoinInfoBox[1]=temp;}else if(!pageInfo.hasICOData()){$scope.tabsCoinInfoBox.splice($scope.getIdForInternalId(1),1);}
if(pageInfo.getFeaturesInfo().length==0){$scope.tabsCoinInfoBox.splice($scope.getIdForInternalId(2),1);}
if(pageInfo.getTechnologyInfo().length==0){$scope.tabsCoinInfoBox.splice($scope.getIdForInternalId(3),1);}
if(!subscriptionManager.hasSubs()){$scope.tabsCoinInfoBox.splice($scope.getIdForInternalId(4),1);}
$scope.changeTab=function(index){if($scope.tabsCoinInfoBox[index].internal==$scope.selectedTab.internal){return;}
$scope.selectedTab=$scope.tabsCoinInfoBox[index];$scope.selectedIndex=index;}
$scope.selectedTab=$scope.tabsCoinInfoBox[0];}],scope:{},link:function(scope,element,attrs){}};}]);;;;angular.module('ccc-app').factory('portfolioSummary',['$filter',function portfolioSummaryFactory($filter){var utilStatic=CCC.STATIC.UTIL;var summaryData=[];var displayData=[];var holdingsData={};var displayCurrency=CCC.STATIC.CURRENCY;var currentSymbol='';return{addData:function(apiResponse){summaryData=apiResponse.Data;this.generateDisplayData();this.generateHoldingsData();},addNewPortfolio:function(newPortfolio){summaryData.push(newPortfolio);this.generateDisplayData();this.generateHoldingsData();},addPortfolioMember:function(currentMember){for(var i=0,length=summaryData.length;i<length;i++){if(summaryData[i].Id==currentMember.PortfolioId){summaryData[i].Members.push(currentMember);this.generateDisplayData();this.generateHoldingsData();return;}}},setCurrentSymbol:function(symbol){currentSymbol=symbol;},generateDisplayData:function(){displayData=[];displayData=summaryData.map(function(portfolio){var displayPortfolio={};displayPortfolio['Id']=portfolio.Id;displayPortfolio['Name']=portfolio.Name+' ('+portfolio.Members.length+') '+portfolio.Currency;return displayPortfolio;});displayData.sort(function(a,b){if(a.Name.toLowerCase()<b.Name.toLowerCase()){return-1;}
if(a.Name.toLowerCase()>b.Name.toLowerCase()){return 1;}
return 0;});},generateHoldingsData:function(){holdingsData={};for(var i=0,length=summaryData.length;i<length;i++){var currentPortfolioMembers=summaryData[i].Members;for(var j=0,jlength=currentPortfolioMembers.length;j<jlength;j++){var currentMember=currentPortfolioMembers[j];if(holdingsData.hasOwnProperty(currentMember.Coin.Symbol)){holdingsData[currentMember.Coin.Symbol]+=currentMember.Amount;}else{holdingsData[currentMember.Coin.Symbol]=currentMember.Amount;}}}},getDisplayData:function(){return displayData;},hasData:function(){return summaryData.length>0;},getCoinHoldings:function(symbol){return holdingsData[symbol]||0;},getCurrentHoldings:function(){return holdingsData[currentSymbol]||0;},hasCurrentHoldings:function(){return holdingsData.hasOwnProperty(currentSymbol);},getCurrentHoldingsDisplay:function(){return utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentSymbol),holdingsData[currentSymbol]||0,$filter('number'),'short',false);},getTotalCurrentHoldingsValue:function(selectedCurrency){var currentTotalHoldings=(holdingsData[currentSymbol]||0)*selectedCurrency.DATA.PRICE;if(selectedCurrency.hasOwnProperty("DISPLAY")&&selectedCurrency.DISPLAY.hasOwnProperty("TOSYMBOL")){return utilStatic.convertValueToDisplay(selectedCurrency.DISPLAY.TOSYMBOL,currentTotalHoldings,$filter('number'),'short',false);}
return"Not Available";}};}]);angular.module('ccc-app').factory('portfolioManager',['$rootScope','$http','$filter','$timeout','streamerUtilities','cccLocalStorage',function portfolioManagerFactory($rootScope,$http,$filter,$timeout,streamerUtilities,cccLocalStorage){var cacheVersion="V0.9.3";var allPortfolioData=[];var availableCurrencies=[];var cachedSubsList={};var portfolioSponsor={HasSponsor:false}
var currentCacheVersion=cccLocalStorage.getText('portfolioHistoDataCacheVersion')
var cachedPriceList={};if(currentCacheVersion==cacheVersion){cachedPriceList=cccLocalStorage.getObject('portfolioHistoData');}else{cccLocalStorage.setItem('portfolioHistoDataCacheVersion',cacheVersion);}
var cachedMonthData={};var utilStatic=CCC.STATIC.UTIL;var displayCurrency=CCC.STATIC.CURRENCY;var ordering={'sortingField':'BoughtOn','isAscending':true};var loadingData=true;var loadingStage="Stage 1 : ";var loadingMessage="Loading subscription and current price info";return{setPortfolioData:function(apiResponse,callback){portfolioSponsor=apiResponse["Sponsor"];allPortfolioData=apiResponse["Data"];if(this.cryptopainHasPortfolioData()){allPortfolioData.sort(function(a,b){if(a.Name.toLowerCase()<b.Name.toLowerCase()){return-1;}
if(a.Name.toLowerCase()>b.Name.toLowerCase()){return 1;}
if(a.Name.toLowerCase()==b.Name.toLowerCase()){return a.Id-b.Id;}
return 0;});loadingData=true;this.generateAllPortfolioSubsAndData(0);}else{loadingData=false;}},getCachedMonthData:function(portfolioId,symbol){if(cachedMonthData.hasOwnProperty(portfolioId)){if(cachedMonthData[portfolioId].hasOwnProperty(symbol)){return Object.assign({},cachedMonthData[portfolioId][symbol]);}}
return{};},saveCachedMonthData:function(portfolioId,symbol,dataObject){if(!cachedMonthData.hasOwnProperty(portfolioId)){cachedMonthData[portfolioId]={};}
cachedMonthData[portfolioId][symbol]=Object.assign({},dataObject);},getLoadingData:function(){return loadingData;},getLoadingMessage:function(){return loadingMessage;},getLoadingStage:function(){return loadingStage;},generateAllPortfolioSubsAndData:function(portfolioIndex){var currentObject=this;if(portfolioIndex==allPortfolioData.length){loadingData=false;$rootScope.$emit("PortfoliosFullyLoaded",portfolioIndex);return;}
currentObject.generateSinglePortfolioSubsAndData(portfolioIndex,function(){portfolioIndex=portfolioIndex+1;currentObject.generateAllPortfolioSubsAndData(portfolioIndex);})},populatePairsWithTimestampInfo:function(index,pairsWithTimestamp,currentPortfolio,callback){var portfolioSoldMembers=currentPortfolio.SoldMembers;var portfolioMembers=currentPortfolio.Members;var portfolioSymbol=currentPortfolio.Currency;for(var soldCoinIndex=0;soldCoinIndex<portfolioSoldMembers.length;soldCoinIndex++){var currentSoldMember=portfolioSoldMembers[soldCoinIndex];var currentSymbol=currentSoldMember.Coin.Symbol;if(currentSoldMember.SellCurrency!=portfolioSymbol){var pairToLoad=currentSoldMember.SellCurrency+'~'+portfolioSymbol+'~'+currentSoldMember.SoldOnTs;if(pairsWithTimestamp[index]==pairToLoad){currentSoldMember.SubInfo={};currentSoldMember.SubInfo.Conversion="Yes";currentSoldMember.PriceInfo.PortfolioValues.RAW.Price=currentSoldMember.SellPrice*cachedPriceList[pairsWithTimestamp[index]][portfolioSymbol];}}
if(currentSoldMember.BuyCurrency!=portfolioSymbol){var pairToLoad=currentSoldMember.BuyCurrency+'~'+portfolioSymbol+'~'+currentSoldMember.BoughtOnTs;if(pairsWithTimestamp[index]==pairToLoad){currentSoldMember.SubConvInfoBuy={};currentSoldMember.SubConvInfoBuy.Conversion="Yes";currentSoldMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted=currentSoldMember.BuyPrice*cachedPriceList[pairsWithTimestamp[index]][portfolioSymbol];}}}
for(var memberIndex=0;memberIndex<portfolioMembers.length;memberIndex++){var currentMember=portfolioMembers[memberIndex];var currentSymbol=currentMember.Coin.Symbol;if(currentMember.BuyCurrency!=portfolioSymbol){var pairToLoad=currentMember.BuyCurrency+'~'+portfolioSymbol+'~'+currentMember.BoughtOnTs;if(pairsWithTimestamp[index]==pairToLoad){currentMember.DataUpdated=true;currentMember.SubConvInfoBuy={};currentMember.SubConvInfoBuy.Conversion="Yes";currentMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted=currentMember.BuyPrice*cachedPriceList[pairsWithTimestamp[index]][portfolioSymbol];currentMember.PriceInfo.PortfolioValues.DISPLAY.BuyPriceConverted=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentPortfolio.Currency),currentMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted,$filter('number'));}}}
index=index+1;this.loadPairsWithTimestampData(index,pairsWithTimestamp,currentPortfolio,false,callback);},loadPairsWithTimestampData:function(index,pairsWithTimestamp,currentPortfolio,cacheReset,callback){var currentObject=this;if(index==pairsWithTimestamp.length){loadingMessage="Generating portfolio stats";loadingStage="Stage 3 : ";currentObject.generatePortfolioStats(currentPortfolio);currentObject.generatePortfolioSellStats(currentPortfolio);currentObject.sortPortfolioMembers(currentPortfolio,'Sold',true);loadingMessage="";loadingStage="";currentPortfolio.IsReloadingSoldData=false;callback();}else{loadingStage="Stage 2 : ";if(cachedPriceList.hasOwnProperty(pairsWithTimestamp[index])){loadingMessage="Portfolio ("+currentPortfolio.Id+") loading conversion data: "+index+"/"+pairsWithTimestamp.length+" ("+Math.floor(index/pairsWithTimestamp.length*100)+"%)";currentObject.populatePairsWithTimestampInfo(index,pairsWithTimestamp,currentPortfolio,callback);}else{var pairInfo=pairsWithTimestamp[index].split('~');currentObject.loadPastPairPortfolioData(pairInfo[0],pairInfo[1],pairInfo[2],cacheReset).then(function(apiResponseHistoData){apiResponseHistoData=apiResponseHistoData.data;if(apiResponseHistoData[pairInfo[0]]==undefined){$timeout(function(){currentObject.loadPairsWithTimestampData(index,pairsWithTimestamp,currentPortfolio,true,callback);},500);}else{loadingMessage="Portfolio ("+currentPortfolio.Id+") loading conversion data: "+index+"/"+pairsWithTimestamp.length+" ("+Math.floor(index/pairsWithTimestamp.length*100)+"%)";cachedPriceList[pairsWithTimestamp[index]]=apiResponseHistoData[pairInfo[0]];cccLocalStorage.setObject('portfolioHistoData',cachedPriceList);currentObject.populatePairsWithTimestampInfo(index,pairsWithTimestamp,currentPortfolio,callback);}},function(response){$timeout(function(){currentObject.loadPairsWithTimestampData(index,pairsWithTimestamp,currentPortfolio,false,callback);},500);});}}},generateSinglePortfolioSubsAndData:function(portfolioIndex,callback){var currentObject=this;currentObject.decorateAllPortfolioMembers(allPortfolioData[portfolioIndex]);allPortfolioData[portfolioIndex].IsReloadingData=true;allPortfolioData[portfolioIndex].IsReloadingSoldData=true;var coinsNeeded=currentObject.generatePairsToLoad(allPortfolioData[portfolioIndex]);if(coinsNeeded.length>0){currentObject.loadCurrentPortfolioSubs(coinsNeeded).success(function(responseSubsList){for(var pair in responseSubsList){if(!cachedSubsList.hasOwnProperty(pair)){cachedSubsList[pair]=responseSubsList[pair];}}
currentObject.populateSubscriptionData(allPortfolioData[portfolioIndex],responseSubsList);currentObject.sortPortfolioMembers(allPortfolioData[portfolioIndex],'Current',true);currentObject.decoratePortfolioStats(allPortfolioData[portfolioIndex]);currentObject.emitStreamerData(responseSubsList);var pairsWithTimestamp=currentObject.generatePairsWithTimestampToLoad(allPortfolioData[portfolioIndex]);currentObject.loadPairsWithTimestampData(0,pairsWithTimestamp,allPortfolioData[portfolioIndex],false,callback);});}else{currentObject.decoratePortfolioStats(allPortfolioData[portfolioIndex]);var pairsWithTimestamp=currentObject.generatePairsWithTimestampToLoad(allPortfolioData[portfolioIndex]);currentObject.loadPairsWithTimestampData(0,pairsWithTimestamp,allPortfolioData[portfolioIndex],false,callback);}},emitStreamerData:function(apiResponse){if(apiResponse.hasOwnProperty("Response")&&apiResponse["Response"]=='Error'){return;}
for(var symbolData in apiResponse){var currentRawData=apiResponse[symbolData].RAW;if(apiResponse[symbolData].SubsNeeded.length>0){for(var i=0;i<currentRawData.length;i++){streamerUtilities.emitCurrentMessage('CurrentAggMessage',currentRawData[i]);}}};},populateSubscriptionData:function(portfolio,apiResponse){var portfolioMembers=portfolio.Members;var portfolioSymbol=portfolio.Currency;for(var i=0,length=portfolioMembers.length;i<length;i++){if(portfolioMembers[i].Coin.Symbol!=portfolioSymbol){if(apiResponse.hasOwnProperty(portfolioMembers[i].Coin.Symbol+'~'+portfolioSymbol)){portfolioMembers[i].SubInfo=apiResponse[portfolioMembers[i].Coin.Symbol+'~'+portfolioSymbol];portfolioMembers[i].SubInfo.WeHavePriceInfo=true;portfolioMembers[i].DataUpdated=true;}}else{portfolioMembers[i].DataUpdated=true;portfolioMembers[i].SubInfo.WeHavePriceInfo=true;}
if(portfolioMembers[i].BuyCurrency!=portfolioSymbol){if(apiResponse.hasOwnProperty(portfolioMembers[i].Coin.Symbol+'~'+portfolioMembers[i].BuyCurrency)){portfolioMembers[i].DataUpdated=true;portfolioMembers[i].SubInfoBuy=apiResponse[portfolioMembers[i].Coin.Symbol+'~'+portfolioMembers[i].BuyCurrency];portfolioMembers[i].SubInfoBuy.WeHavePriceInfo=true;}}else{portfolioMembers[i].DataUpdated=true;portfolioMembers[i].SubInfoBuy.WeHavePriceInfo=true;}}},generatePairsToLoad:function(portfolio){var portfolioMembers=portfolio.Members;var portfolioSymbol=portfolio.Currency;var interestingSymbols=[];for(var i=0,length=portfolioMembers.length;i<length;i++){var currentSymbol=portfolioMembers[i].Coin.Symbol;if(interestingSymbols.indexOf(currentSymbol+'~'+portfolioSymbol)==-1){interestingSymbols.push(currentSymbol+'~'+portfolioSymbol);}
if(portfolioMembers[i].BuyCurrency!=portfolioSymbol){if(interestingSymbols.indexOf(currentSymbol+'~'+portfolioMembers[i].BuyCurrency)==-1){interestingSymbols.push(currentSymbol+'~'+portfolioMembers[i].BuyCurrency);}}}
return interestingSymbols.join();},generatePairsWithTimestampToLoad:function(portfolio){var portfolioSoldMembers=portfolio.SoldMembers;var portfolioMembers=portfolio.Members;var portfolioSymbol=portfolio.Currency;var interestingPairs=[];for(var i=0,length=portfolioSoldMembers.length;i<length;i++){var currentSymbol=portfolioSoldMembers[i].Coin.Symbol;if(portfolioSoldMembers[i].SellCurrency!=portfolioSymbol){var pairToLoad=portfolioSoldMembers[i].SellCurrency+'~'+portfolioSymbol+'~'+portfolioSoldMembers[i].SoldOnTs;if(interestingPairs.indexOf(pairToLoad)==-1){interestingPairs.push(pairToLoad);}}else{portfolioSoldMembers[i].SubInfo={};portfolioSoldMembers[i].SubInfo.Conversion='NotNeeded';portfolioSoldMembers[i].PriceInfo.PortfolioValues.RAW.Price=portfolioSoldMembers[i].SellPrice;}
if(portfolioSoldMembers[i].BuyCurrency!=portfolioSymbol){var pairToLoad=portfolioSoldMembers[i].BuyCurrency+'~'+portfolioSymbol+'~'+portfolioSoldMembers[i].BoughtOnTs;if(interestingPairs.indexOf(pairToLoad)==-1){interestingPairs.push(pairToLoad);}}else{portfolioSoldMembers[i].SubConvInfoBuy={};portfolioSoldMembers[i].SubConvInfoBuy.Conversion='NotNeeded';portfolioSoldMembers[i].PriceInfo.PortfolioValues.RAW.BuyPriceConverted=portfolioSoldMembers[i].BuyPrice;}}
for(var i=0,length=portfolioMembers.length;i<length;i++){var currentSymbol=portfolioMembers[i].Coin.Symbol;if(portfolioMembers[i].BuyCurrency!=portfolioSymbol){var pairToLoad=portfolioMembers[i].BuyCurrency+'~'+portfolioSymbol+'~'+portfolioMembers[i].BoughtOnTs;if(interestingPairs.indexOf(pairToLoad)==-1){interestingPairs.push(pairToLoad);}}else{portfolioMembers[i].SubConvInfoBuy={};portfolioMembers[i].SubConvInfoBuy.Conversion='NotNeeded';portfolioMembers[i].DataUpdated=true;portfolioMembers[i].PriceInfo.PortfolioValues.RAW.BuyPriceConverted=portfolioMembers[i].BuyPrice;portfolioMembers[i].PriceInfo.PortfolioValues.DISPLAY.BuyPriceConverted=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioMembers[i].BuyPrice,$filter('number'));}}
return interestingPairs;},getOrdering:function(){return ordering;},changeOrdering:function(orderingObj){ordering=orderingObj;},sortIndividualPortfolioSide:function(membersToSort,sortField,sortOrderCoeficient){switch(sortField){case"SoldOn":membersToSort.sort(function(a,b){if(a.SoldOnTs<b.SoldOnTs){return-1*sortOrderCoeficient;}
if(a.SoldOnTs>b.SoldOnTs){return 1*sortOrderCoeficient;}
if(a.SoldOnTs==b.SoldOnTs){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"BoughtOn":membersToSort.sort(function(a,b){if(a.BoughtOnTs<b.BoughtOnTs){return-1*sortOrderCoeficient;}
if(a.BoughtOnTs>b.BoughtOnTs){return 1*sortOrderCoeficient;}
if(a.BoughtOnTs==b.BoughtOnTs){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"Id":membersToSort.sort(function(a,b){if(a.Id<b.Id){return-1*sortOrderCoeficient;}
if(a.Id>b.Id){return 1*sortOrderCoeficient;}
return 0;});break;case"Name":membersToSort.sort(function(a,b){if(a.Coin.Name.toLowerCase()<b.Coin.Name.toLowerCase()){return-1*sortOrderCoeficient;}
if(a.Coin.Name.toLowerCase()>b.Coin.Name.toLowerCase()){return 1*sortOrderCoeficient;}
if(a.Coin.Name.toLowerCase()==a.Coin.Name.toLowerCase()){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"Price":membersToSort.sort(function(a,b){if(a.PriceInfo.PortfolioValues.RAW.Price<b.PriceInfo.PortfolioValues.RAW.Price){return-1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.Price>b.PriceInfo.PortfolioValues.RAW.Price){return 1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.Price==b.PriceInfo.PortfolioValues.RAW.Price){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"TotalValue":membersToSort.sort(function(a,b){if(a.PriceInfo.PortfolioValues.RAW.Total<b.PriceInfo.PortfolioValues.RAW.Total){return-1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.Total>b.PriceInfo.PortfolioValues.RAW.Total){return 1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.Total==b.PriceInfo.PortfolioValues.RAW.Total){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"ProfitLoss":membersToSort.sort(function(a,b){if(a.PriceInfo.PortfolioValues.RAW.Profit<b.PriceInfo.PortfolioValues.RAW.Profit){return-1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.Profit>b.PriceInfo.PortfolioValues.RAW.Profit){return 1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.Profit==b.PriceInfo.PortfolioValues.RAW.Profit){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"Change":membersToSort.sort(function(a,b){if(a.PriceInfo.PortfolioValues.RAW.PctProfit<b.PriceInfo.PortfolioValues.RAW.PctProfit){return-1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.PctProfit>b.PriceInfo.PortfolioValues.RAW.PctProfit){return 1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.PctProfit==b.PriceInfo.PortfolioValues.RAW.PctProfit){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;case"ChangeSold":membersToSort.sort(function(a,b){if(a.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue<b.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue){return-1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue>b.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue){return 1*sortOrderCoeficient;}
if(a.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue==b.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue){return(a.Id-b.Id)*sortOrderCoeficient;}
return 0;});break;}},sortPortfolioMembers:function(portfolio,type,forceSort){if(!forceSort){if(ordering.sortingField=='Id'||ordering.sortingField=='Name'){return;}}
var sortingSold=ordering.sortingField;if(sortingSold=="BoughtOn"){sortingSold="SoldOn";}
if(sortingSold=="Change"){sortingSold="ChangeSold";}
var sortOrderCoeficient=1;if(ordering.isAscending==false){sortOrderCoeficient=-1;}
if(type=='Sold'||type=='Both'){if(portfolio.IsCollapsed==false){this.sortIndividualPortfolioSide(portfolio.SoldMembers,sortingSold,sortOrderCoeficient);}else{this.sortIndividualPortfolioSide(portfolio.SoldMembersCollapsed,sortingSold,sortOrderCoeficient);}}
if(type=='Current'||type=='Both'){if(portfolio.IsCollapsed==false){this.sortIndividualPortfolioSide(portfolio.Members,ordering.sortingField,sortOrderCoeficient);}else{this.sortIndividualPortfolioSide(portfolio.MembersCollapsed,ordering.sortingField,sortOrderCoeficient);}}},decorateAllPortfolioMembers:function(portfolio){for(var i=0,length=portfolio.Members.length;i<length;i++){this.decorateSinglePortfolioMember(portfolio.Members[i]);}
for(var i=0,length=portfolio.SoldMembers.length;i<length;i++){this.decorateSinglePortfolioMember(portfolio.SoldMembers[i]);}},generateSinglePortfolioMemberInfoBottom:function(currentMember){currentMember.InfoBottom="";currentMember.SoldInfoBottom="";if(currentMember.Description!=""){currentMember.InfoBottom=$filter('limitTo')(currentMember.Description,53);if(currentMember.Description.length>53){currentMember.InfoBottom=$filter('limitTo')(currentMember.Description,50)+'...';}}else{if(currentMember.StoredIn!=""){currentMember.InfoBottom=" - "+currentMember.StoredIn;}
if(currentMember.WalletName!=""){currentMember.InfoBottom=" - "+currentMember.WalletName;}
if(currentMember.ExchangeName!=""){currentMember.InfoBottom=" - "+currentMember.ExchangeName;}}
currentMember.SoldInfoBottom=$filter('limitTo')(currentMember.SoldDescription,53);if(currentMember.SoldDescription.length>53){currentMember.SoldInfoBottom=$filter('limitTo')(currentMember.SoldDescription,50)+'...';}},decorateSinglePortfolioMember:function(currentMember){currentMember.PriceInfo={'PortfolioValues':{'RAW':{'Price':1,'Open24Hour':1},'DISPLAY':{}},'Current':{'RAW':{},'DISPLAY':{}},'Conversion':{'RAW':{},'DISPLAY':{}},'SubOne':{'RAW':{},'DISPLAY':{}},'CurrentBuy':{'RAW':{},'DISPLAY':{}},'ConversionBuy':{'RAW':{},'DISPLAY':{}},'ConversionBuySubOne':{'RAW':{},'DISPLAY':{}},'Visual':{}}
currentMember.SubInfo={SubsNeeded:[],WeHavePriceInfo:false};currentMember.SubInfoBuy={SubsNeeded:[],WeHavePriceInfo:false};currentMember.DisplayBuyPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentMember.BuyCurrency),currentMember.BuyPrice,$filter('number'));if(currentMember.Sold==true){currentMember.DisplaySellPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentMember.SellCurrency),currentMember.SellPrice,$filter('number'));}
this.generateSinglePortfolioMemberInfoBottom(currentMember);},decoratePortfolioStats:function(portfolio){portfolio.Stats={};portfolio.Stats.Visual={'TOTALHOLDINGSDISPLAY':false,'TOTALPROFITDISPLAY':false};portfolio.Stats.TotalProfit=0;portfolio.Stats.TotalProfitDisplay="0.00";portfolio.Stats.TotalInvestment=0;portfolio.Stats.TotalInvestmentDisplay="0.00";portfolio.Stats.TotalProfitPct=0;portfolio.Stats.TotalProfitPctDisplay="0%";portfolio.Stats.TotalHoldings=0;portfolio.Stats.TotalHoldingsDisplay="0.00";portfolio.Stats.DayProfit=0;portfolio.Stats.DayProfitDisplay="0.00";portfolio.Stats.DayProfitPct=0;portfolio.Stats.DayProfitPctDisplay="0%";portfolio.Stats.Realized=0;portfolio.Stats.RealizedDisplay="0.00";portfolio.Stats.RealizedProfit=0;portfolio.Stats.RealizedProfitDisplay="0.00";portfolio.Stats.NetRealized=0;portfolio.Stats.NetRealizedDisplay=0;portfolio.CurrencyDisplay=displayCurrency.getSymbol(portfolio.Currency);},addNewPortfolio:function(portfolio){this.decoratePortfolioStats(portfolio);allPortfolioData.push(portfolio);},removePortfolio:function(portfolioId){for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==portfolioId){allPortfolioData.splice(i,1);return;}}},addSubsToPortfolioMember:function(currentMember,currentPortfolio,callback){var currentSymbol=currentMember.Coin.Symbol;var interestingSymbols=[];var currentPairSub=currentSymbol+'~'+currentPortfolio.Currency;if(cachedSubsList.hasOwnProperty(currentPairSub)){currentMember.SubInfo=cachedSubsList[currentPairSub];}else{interestingSymbols.push(currentPairSub);}
if(currentMember.BuyCurrency!=currentPortfolio.Currency){var currentBuySub=currentSymbol+'~'+currentMember.BuyCurrency;if(cachedSubsList.hasOwnProperty(currentBuySub)){currentMember.SubInfoBuy=cachedSubsList[currentBuySub];}else{if(interestingSymbols.indexOf(currentBuySub)==-1){interestingSymbols.push(currentBuySub);}}}else{currentMember.SubInfoBuy={SubsNeeded:[]};}
if(interestingSymbols.length==0){callback(null);}else{this.loadCurrentPortfolioSubs(interestingSymbols.join(",")).success(function(responseSubsList){if(responseSubsList.hasOwnProperty("Response")&&responseSubsList.Response=="Error"){currentMember.SubInfoBuy={SubsNeeded:[],WeHavePriceInfo:false};callback(responseSubsList);}else{for(var pair in responseSubsList){if(!cachedSubsList.hasOwnProperty(pair)){cachedSubsList[pair]=responseSubsList[pair];}}
currentMember.SubInfo=cachedSubsList[currentMember.Coin.Symbol+'~'+currentPortfolio.Currency]||{SubsNeeded:[]};if(currentMember.BuyCurrency!=currentPortfolio.Currency){currentMember.SubInfoBuy=cachedSubsList[currentMember.Coin.Symbol+'~'+currentMember.BuyCurrency]||{SubsNeeded:[]};}else{currentMember.SubInfoBuy={SubsNeeded:[]};}
callback(responseSubsList);}});}},addPortfolioMember:function(currentMember){var currentObject=this;currentObject.decorateSinglePortfolioMember(currentMember);for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentMember.PortfolioId){var currentPortfolio=allPortfolioData[i];this.addSubsToPortfolioMember(currentMember,currentPortfolio,function(responseSubsList){if(responseSubsList!=null){currentObject.emitStreamerData(responseSubsList);}
currentPortfolio.Members.push(currentMember);var pairsWithTimestamp=currentObject.generatePairsWithTimestampToLoad(currentPortfolio);currentObject.loadPairsWithTimestampData(0,pairsWithTimestamp,currentPortfolio,false,function(){$rootScope.$emit("CoinStatusChangeOnPortfolio",'Add');$rootScope.$emit("CoinStatusChangeOnChart",currentPortfolio.Id);});return;});return;}}},addPortfolioMemberSell:function(currentMember){this.decorateSinglePortfolioMember(currentMember);for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentMember.PortfolioId){var currentPortfolio=allPortfolioData[i];currentPortfolio.SoldMembers.push(currentMember);var pairsWithTimestamp=this.generatePairsWithTimestampToLoad(currentPortfolio);this.loadPairsWithTimestampData(0,pairsWithTimestamp,currentPortfolio,false,function(){$rootScope.$emit("AddCoinSellToPortfolio",i);$rootScope.$emit("CoinStatusChangeOnChart",currentPortfolio.Id);});return;}}},removePortfolioMember:function(currentMember,reloadChart){for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentMember.PortfolioId){if(currentMember.Sold==false){for(var j=0,jlength=allPortfolioData[i].Members.length;j<jlength;j++){if(allPortfolioData[i].Members[j].Id==currentMember.Id){var coinToRemove=allPortfolioData[i].Members[j];allPortfolioData[i].Members.splice(j,1);$rootScope.$emit("CoinStatusChangeOnPortfolio",'Remove');if(reloadChart){$rootScope.$emit("CoinStatusChangeOnChart",allPortfolioData[i].Id);}
this.generatePortfolioStats(allPortfolioData[i]);return;}}}else{for(var j=0,jlength=allPortfolioData[i].SoldMembers.length;j<jlength;j++){if(allPortfolioData[i].SoldMembers[j].Id==currentMember.Id){var coinToRemove=allPortfolioData[i].SoldMembers[j];allPortfolioData[i].SoldMembers.splice(j,1);if(reloadChart){$rootScope.$emit("CoinStatusChangeOnChart",allPortfolioData[i].Id);}
this.generatePortfolioSellStats(allPortfolioData[i]);return;}}}}}},isPortfolioChanged:function(currentPortfolio){for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentPortfolio.Id){if(allPortfolioData[i].Name!=currentPortfolio.Name){return true;}
if(allPortfolioData[i].Currency!=currentPortfolio.Currency){return true;}
if(allPortfolioData[i].Description!=currentPortfolio.Description){return true;}
if(allPortfolioData[i].Access!=currentPortfolio.Access){return true;}
if(allPortfolioData[i].Encryption!=currentPortfolio.Encryption){return true;}
return false;}}
return false;},isCoinChanged:function(currentPortfolioMember){for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentPortfolioMember.PortfolioId){for(var j=0,jlength=allPortfolioData[i].Members.length;j<jlength;j++){if(allPortfolioData[i].Members[j].Id==currentPortfolioMember.Id){var oldData=allPortfolioData[i].Members[j];if(oldData.Amount!=currentPortfolioMember.Amount){return true;}
if(oldData.BuyPrice!=currentPortfolioMember.BuyPrice){return true;}
if(oldData.BuyCurrency!=currentPortfolioMember.BuyCurrency){return true;}
if(oldData.StoredIn!=currentPortfolioMember.StoredIn){return true;}
if(oldData.Address!=currentPortfolioMember.Address){return true;}
if(oldData.WalletName!=currentPortfolioMember.WalletName){return true;}
if(oldData.ExchangeName!=currentPortfolioMember.ExchangeName){return true;}
if(oldData.Description!=currentPortfolioMember.Description){return true;}
if(currentPortfolioMember.BoughtOn!=null){if(oldData.BoughtOnTs!=Math.floor(currentPortfolioMember.BoughtOn.getTime()/1000)){return true;}}
if(currentPortfolioMember.BuyPriceType=="total"){return true;}
return false;}}
for(var j=0,jlength=allPortfolioData[i].SoldMembers.length;j<jlength;j++){if(allPortfolioData[i].SoldMembers[j].Id==currentPortfolioMember.Id){var oldData=allPortfolioData[i].SoldMembers[j];if(oldData.Amount!=currentPortfolioMember.Amount){return true;}
if(oldData.BuyPrice!=currentPortfolioMember.BuyPrice){return true;}
if(oldData.BuyCurrency!=currentPortfolioMember.BuyCurrency){return true;}
if(oldData.StoredIn!=currentPortfolioMember.StoredIn){return true;}
if(oldData.Address!=currentPortfolioMember.Address){return true;}
if(oldData.WalletName!=currentPortfolioMember.WalletName){return true;}
if(oldData.ExchangeName!=currentPortfolioMember.ExchangeName){return true;}
if(oldData.Description!=currentPortfolioMember.Description){return true;}
if(currentPortfolioMember.BoughtOn!=null){if(oldData.BoughtOnTs!=Math.floor(currentPortfolioMember.BoughtOn.getTime()/1000)){return true;}}
if(oldData.SellAmount!=currentPortfolioMember.SellAmount){return true;}
if(oldData.SellPrice!=currentPortfolioMember.SellPrice){return true;}
if(oldData.SellCurrency!=currentPortfolioMember.SellCurrency){return true;}
if(oldData.SoldOnTs!=Math.floor(currentPortfolioMember.SoldOn.getTime()/1000)){return true;}
if(oldData.SoldDescription!=currentPortfolioMember.SoldDescription){return true;}
if(oldData.SellPriceType=="total"){return true;}
if(currentPortfolioMember.BuyPriceType=="total"){return true;}
return false;}}}}
return false;},updatePortfolio:function(currentPortfolio){var currencyUpdated=false;for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentPortfolio.Id){if(allPortfolioData[i].Currency!=currentPortfolio.Currency){$rootScope.$emit("PortfolioReload",currentPortfolio.Currenc);return true;}else{allPortfolioData[i].Name=currentPortfolio.Name;allPortfolioData[i].Description=currentPortfolio.Description;allPortfolioData[i].Access=currentPortfolio.Access;allPortfolioData[i].Encryption=currentPortfolio.Encryption;return true;}}}
return false;},updateIndividualCoin:function(oldData,currentPortfolioParent,currentPortfolioMember,reloadChart,currentObject,type){var currencyChanged=false;var chartDataChanged=false;if(currentPortfolioMember.hasOwnProperty('BuyCurrency')&&oldData.BuyCurrency!=currentPortfolioMember.BuyCurrency){oldData.BuyCurrency=currentPortfolioMember.BuyCurrency;oldData.DisplayBuyPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(oldData.BuyCurrency),oldData.BuyPrice,$filter('number'));oldData.DataUpdated=true;currencyChanged=true;chartDataChanged=true;}
if(currentPortfolioMember.hasOwnProperty('Amount')&&oldData.Amount!=currentPortfolioMember.Amount){oldData.Amount=currentPortfolioMember.Amount;oldData.DataUpdated=true;chartDataChanged=true;}
if(currentPortfolioMember.hasOwnProperty('BuyPrice')&&oldData.BuyPrice!=currentPortfolioMember.BuyPrice){oldData.BuyPrice=currentPortfolioMember.BuyPrice;oldData.DataUpdated=true;oldData.DisplayBuyPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(oldData.BuyCurrency),oldData.BuyPrice,$filter('number'));chartDataChanged=true;}
if(currentPortfolioMember.hasOwnProperty('StoredIn')&&oldData.StoredIn!=currentPortfolioMember.StoredIn){oldData.StoredIn=currentPortfolioMember.StoredIn;}
if(currentPortfolioMember.hasOwnProperty('Address')&&oldData.Address!=currentPortfolioMember.Address){oldData.Address=currentPortfolioMember.Address;}
if(currentPortfolioMember.hasOwnProperty('WalletName')&&oldData.WalletName!=currentPortfolioMember.WalletName){oldData.WalletName=currentPortfolioMember.WalletName;}
if(currentPortfolioMember.hasOwnProperty('ExchangeName')&&oldData.ExchangeName!=currentPortfolioMember.ExchangeName){oldData.ExchangeName=currentPortfolioMember.ExchangeName;}
if(currentPortfolioMember.hasOwnProperty('Description')&&oldData.Description!=currentPortfolioMember.Description){oldData.Description=currentPortfolioMember.Description;}
if(currentPortfolioMember.hasOwnProperty('BoughtOnTs')&&oldData.BoughtOnTs!=currentPortfolioMember.BoughtOnTs){oldData.BoughtOnTs=currentPortfolioMember.BoughtOnTs;chartDataChanged=true;};if(currentPortfolioMember.hasOwnProperty('SoldOnTs')&&oldData.BoughtOnTs!=currentPortfolioMember.SoldOnTs){oldData.SoldOnTs=currentPortfolioMember.SoldOnTs;chartDataChanged=true;}
if(currentPortfolioMember.hasOwnProperty('SellCurrency')&&oldData.SellCurrency!=currentPortfolioMember.SellCurrency){oldData.SellCurrency=currentPortfolioMember.SellCurrency;oldData.DisplaySellPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(oldData.SellCurrency),oldData.SellPrice,$filter('number'));oldData.DataUpdated=true;currencyChanged=true;chartDataChanged=true;}
if(currentPortfolioMember.hasOwnProperty('SellPrice')&&oldData.SellPrice!=currentPortfolioMember.SellPrice){oldData.SellPrice=currentPortfolioMember.SellPrice;oldData.DisplaySellPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(oldData.SellCurrency),oldData.SellPrice,$filter('number'));oldData.DataUpdated=true;}
if(currentPortfolioMember.hasOwnProperty('Sold')&&oldData.Sold!=currentPortfolioMember.Sold){oldData.Sold=currentPortfolioMember.Sold};if(currentPortfolioMember.hasOwnProperty('SoldDescription')&&oldData.SoldDescription!=currentPortfolioMember.SoldDescription){oldData.SoldDescription=currentPortfolioMember.SoldDescription}
if(currencyChanged){currentObject.addSubsToPortfolioMember(oldData,currentPortfolioParent,function(responseSubsList){if(responseSubsList!=null){currentObject.emitStreamerData(responseSubsList);}
$rootScope.$emit("CoinStatusChangeOnPortfolio",'Update');if(reloadChart){$rootScope.$emit("CoinStatusChangeOnChart",currentPortfolioParent.Id);}});}else if(chartDataChanged){if(reloadChart){$rootScope.$emit("CoinStatusChangeOnChart",currentPortfolioParent.Id);}}
currentObject.generateSinglePortfolioMemberInfoBottom(oldData);},updateCoin:function(currentPortfolioMember,reloadChart){var currentObject=this;for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==currentPortfolioMember.PortfolioId){for(var j=0,jlength=allPortfolioData[i].Members.length;j<jlength;j++){if(allPortfolioData[i].Members[j].Id==currentPortfolioMember.Id){var oldData=allPortfolioData[i].Members[j];var currentPortfolioParent=allPortfolioData[i];currentObject.updateIndividualCoin(oldData,currentPortfolioParent,currentPortfolioMember,reloadChart,currentObject);return true;}}
for(var j=0,jlength=allPortfolioData[i].SoldMembers.length;j<jlength;j++){if(allPortfolioData[i].SoldMembers[j].Id==currentPortfolioMember.Id){var oldData=allPortfolioData[i].SoldMembers[j];var currentPortfolioParent=allPortfolioData[i];currentObject.updateIndividualCoin(oldData,currentPortfolioParent,currentPortfolioMember,reloadChart,currentObject);return true;}}}}
return false;},generatePortfolioSubsForSingleMember:function(currentMember,currentPortfolio){return currentMember.SubInfo.SubsNeeded.concat(currentMember.SubInfoBuy.SubsNeeded);},generatePortfolioSubsArray:function(currentPortfolio){var portfolioSubs=[];for(var i=0,length=currentPortfolio.Members.length;i<length;i++){portfolioSubs=portfolioSubs.concat(this.generatePortfolioSubsForSingleMember(currentPortfolio.Members[i],currentPortfolio));};return portfolioSubs;},replacePortfolio:function(newPortfolio){for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==newPortfolio.Id){allPortfolioData[i].Currency=newPortfolio.Currency;allPortfolioData[i].CurrencyDisplay=newPortfolio.CurrencyDisplay;allPortfolioData[i].Description=newPortfolio.Description;allPortfolioData[i].Access=newPortfolio.Access;allPortfolioData[i].Encryption=newPortfolio.Encryption;allPortfolioData[i].IsReloadingData=newPortfolio.IsReloadingData;allPortfolioData[i].Members=newPortfolio.Members;allPortfolioData[i].Name=newPortfolio.Name;allPortfolioData[i].Stats=newPortfolio.Stats;allPortfolioData[i].AllSubs=newPortfolio.AllSubs;return allPortfolioData[i];}}
return{};},getAllPortfolios:function(){return allPortfolioData;},getPortfolioByPosition:function(position){return allPortfolioData[position];},getPortfolioById:function(id){for(var i=0,length=allPortfolioData.length;i<length;i++){if(allPortfolioData[i].Id==id){return allPortfolioData[i];}}
return{};},cryptopainHasPortfolioData:function(){return allPortfolioData.length>0;},getPublicPortfolio:function(){if(allPortfolioData.length===0){return{};}
return allPortfolioData[0];},setAvailableCurrencies:function(apiResponse){availableCurrencies=apiResponse.Data;availableCurrencies.sort(function(a,b){if(a.AboveLine==true&&b.AboveLine==false){return-1;}
if(a.AboveLine==false&&b.AboveLine==true){return 1;}
return a.SortId-b.SortId;});var indexForFullLine=0;while(availableCurrencies[indexForFullLine].AboveLine){indexForFullLine++;}
availableCurrencies.splice(indexForFullLine,0,{Symbol:'FULLLINE'});},getAvailableCurrencies:function(){return availableCurrencies;},getAutosuggestCoins:function(query){return $http.get("/api/autosuggest/coins/",{params:{q:query}});},getAutosuggestWallet:function(query){return $http.get("/api/autosuggest/wallet/",{params:{q:query}});},getAutosuggestExchange:function(query){return $http.get("/api/autosuggest/exchange/",{params:{q:query}});},loadPastPairPortfolioData:function(fsym,tsym,toTs,cacheReset){var params={};params['fsym']=fsym;params['tsyms']=tsym;params['ts']=toTs;params['calculationType']='VolFVolT';params['extraParams']='CCC_Portfolio';if(cacheReset!==undefined&&cacheReset==true){params['cb']=Math.floor(Date.now());}
return $http.get("https://min-api.cryptocompare.com/data/pricehistorical",{params:params});},loadCurrentPortfolioSubs:function(pairList){return $http.get("https://min-api.cryptocompare.com/data/subsPairs",{params:{list:pairList,extraParams:'CCC_Portfolio'}});},generateCollapsedPortfolioStats:function(portfolio){var membersTogether={};var tempMembersArray=[];if(portfolio.Members.length>0){for(var i=0,length=portfolio.Members.length;i<length;i++){var symbol=portfolio.Members[i].Coin.Symbol;if(membersTogether.hasOwnProperty(portfolio.Members[i].Coin.Symbol)){membersTogether[symbol].push(i);}else{membersTogether[symbol]=[i];}}}
for(var memberSymbol in membersTogether){var totalPositions=membersTogether[memberSymbol].length;var currrentMemberBySymbol={};if(totalPositions>=1){var weHaveInfo=true;var currentPortfolioMember=portfolio.Members[membersTogether[memberSymbol][0]];currrentMemberBySymbol.Coin=currentPortfolioMember.Coin;currrentMemberBySymbol.PriceInfo={'PortfolioValues':{'RAW':{'Price':1,'Open24Hour':1},'DISPLAY':{}},'Current':{'RAW':{},'DISPLAY':{}},'Conversion':{'RAW':{},'DISPLAY':{}},'SubOne':{'RAW':{},'DISPLAY':{}},'CurrentBuy':{'RAW':{},'DISPLAY':{}},'ConversionBuy':{'RAW':{},'DISPLAY':{}},'ConversionBuySubOne':{'RAW':{},'DISPLAY':{}},'Visual':{}}
if(currentPortfolioMember.SubInfo.WeHavePriceInfo==false){weHaveInfo=false;};if(weHaveInfo&&!currentPortfolioMember.hasOwnProperty('PriceInfo')){weHaveInfo=false;};if(weHaveInfo&&!currentPortfolioMember.PriceInfo.hasOwnProperty('PortfolioValues')){weHaveInfo=false;};if(!weHaveInfo){currrentMemberBySymbol.Amount=currentPortfolioMember.Amount;currrentMemberBySymbol.BuyPriceTotal=currrentMemberBySymbol.Amount*currentPortfolioMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted;currrentMemberBySymbol.BoughtOnTs=currentPortfolioMember.BoughtOnTs;currrentMemberBySymbol.Description="Bought On: "+$filter('date')(new Date(currentPortfolioMember.BoughtOnTs*1000),"dd MMMM yyyy");if(totalPositions==1){currrentMemberBySymbol.InfoBottom=totalPositions+" position open.";}else{currrentMemberBySymbol.InfoBottom=totalPositions+" positions open.";}
for(var i=1,length=totalPositions;i<length;i++){var currentPortfolioMember=portfolio.Members[membersTogether[memberSymbol][i]];currrentMemberBySymbol.Amount+=currentPortfolioMember.Amount;currrentMemberBySymbol.BuyPriceTotal+=currrentMemberBySymbol.Amount*currentPortfolioMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted;currrentMemberBySymbol.Description+=', '+$filter('date')(new Date(currentPortfolioMember.BoughtOnTs*1000),"dd MMMM yyyy");}
var averagePricePaid=currrentMemberBySymbol.BuyPriceTotal/currrentMemberBySymbol.Amount;currrentMemberBySymbol.DisplayBuyPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),averagePricePaid,$filter('number'));tempMembersArray.push(currrentMemberBySymbol);continue;}
currrentMemberBySymbol.PriceInfo.Visual=currentPortfolioMember.PriceInfo.Visual;currrentMemberBySymbol.PriceInfo.Current.RAW.LASTUPDATE=currentPortfolioMember.PriceInfo.Current.RAW.LASTUPDATE;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Price=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Price;currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.Price=currentPortfolioMember.PriceInfo.PortfolioValues.DISPLAY.Price;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Change24Hour=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.ChangePct24Hour;currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.ChangePct24Hour=currentPortfolioMember.PriceInfo.PortfolioValues.DISPLAY.ChangePct24Hour;currrentMemberBySymbol.SubInfo=currentPortfolioMember.SubInfo;currrentMemberBySymbol.SubConvInfoBuy={Conversion:'NotNeeded'};currrentMemberBySymbol.Amount=currentPortfolioMember.Amount;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Total=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Total;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Profit;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalInvestment=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.TotalInvestment;currrentMemberBySymbol.BoughtOnTs=currentPortfolioMember.BoughtOnTs;currrentMemberBySymbol.BuyPriceTotal=currrentMemberBySymbol.Amount*currentPortfolioMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted;currrentMemberBySymbol.Description="Bought On: "+$filter('date')(new Date(currentPortfolioMember.BoughtOnTs*1000),"dd MMMM yyyy");if(totalPositions==1){currrentMemberBySymbol.InfoBottom=totalPositions+" position open.";}else{currrentMemberBySymbol.InfoBottom=totalPositions+" positions open.";}
for(var i=1,length=totalPositions;i<length;i++){var currentPortfolioMember=portfolio.Members[membersTogether[memberSymbol][i]];currrentMemberBySymbol.Amount+=currentPortfolioMember.Amount;currrentMemberBySymbol.BuyPriceTotal+=currentPortfolioMember.Amount*currentPortfolioMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Total+=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Total;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit+=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Profit;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalInvestment+=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.TotalInvestment;currrentMemberBySymbol.Description+=', '+$filter('date')(new Date(currentPortfolioMember.BoughtOnTs*1000),"dd MMMM yyyy");}
currrentMemberBySymbol.Amount=parseFloat(currrentMemberBySymbol.Amount.toFixed(8));var averagePricePaid=currrentMemberBySymbol.BuyPriceTotal/currrentMemberBySymbol.Amount;currrentMemberBySymbol.DisplayBuyPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),averagePricePaid,$filter('number'));currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.Total=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Total,$filter('number'),'short',false);currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.Profit=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit,$filter('number'),'short',false);currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.TotalInvestment=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalInvestment,$filter('number'),'short',false);currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.PctProfit=currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit/currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalInvestment*100;currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.PctProfit=$filter('number')(currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.PctProfit,2)+"%";tempMembersArray.push(currrentMemberBySymbol);}}
membersTogether=null;portfolio.MembersCollapsed=tempMembersArray;},generatePortfolioStats:function(portfolio){var dateNow=new Date();var animationExpires=dateNow.setMilliseconds(dateNow.getMilliseconds()+900);var totalCurrentDisplay="",currentDayProfitDisplay="",pctCurrentDayProfitValue,pctProfit="",profitDisplay="",totalCurrentBuyValueDisplay="",profitBuyValueDisplay="",pctProfitBuyValue="";var totalHoldingsDisplay="",totalProfitDisplay="",totalProfitPctDisplay="",totalInvestmentDisplay="",dayProfitDisplay="",dayProfitPctDisplay="";portfolio.Stats.TotalHoldings=0;portfolio.Stats.TotalProfit=0;portfolio.Stats.TotalInvestment=0;portfolio.Stats.TotalProfitPct=0;portfolio.Stats.DayProfit=0;portfolio.Stats.DayProfitPct=0;if(portfolio.Members.length>0){for(var i=0,length=portfolio.Members.length;i<length;i++){var currentMember=portfolio.Members[i];if(currentMember.SubInfo.WeHavePriceInfo==false){continue;};if(!currentMember.hasOwnProperty('PriceInfo')){continue;};if(!currentMember.PriceInfo.hasOwnProperty('PortfolioValues')){continue;};var portfolioValues=currentMember.PriceInfo.PortfolioValues;var visual=currentMember.PriceInfo.Visual;if(currentMember.DataUpdated==true){currentMember.DataUpdated=false;var previousPriceDisplay=portfolioValues.DISPLAY.Price;var previousPriceValue=portfolioValues.RAW.PrevPrice;portfolioValues.DISPLAY.Price=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.Price,$filter('number'));portfolioValues.DISPLAY.BuyPriceConverted=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.BuyPriceConverted,$filter('number'));portfolioValues.DISPLAY.BuyConversionPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentMember.BuyCurrency),portfolioValues.RAW.BuyConversionPrice,$filter('number'));portfolioValues.RAW.Change24Hour=portfolioValues.RAW.Price-portfolioValues.RAW.Open24Hour;portfolioValues.RAW.ChangePct24Hour=portfolioValues.RAW.Change24Hour/portfolioValues.RAW.Open24Hour*100;portfolioValues.DISPLAY.ChangePct24Hour=$filter('number')(portfolioValues.RAW.ChangePct24Hour,2)+"%";portfolioValues.RAW.Total=portfolioValues.RAW.Price*currentMember.Amount;totalCurrentDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.Total,$filter('number'),'short',false);var newVisual=streamerUtilities.populateVisualBasedOnPrice(previousPriceValue,previousPriceDisplay,portfolioValues.RAW.Price,portfolioValues.DISPLAY.Price);visual=streamerUtilities.mergeObjects(visual,newVisual);if(portfolioValues.DISPLAY.Total!=totalCurrentDisplay){visual.TOTALCURRENTDISPLAY=animationExpires;}
portfolioValues.DISPLAY.Total=totalCurrentDisplay;portfolioValues.RAW.TotalInvestment=portfolioValues.RAW.BuyPriceConverted*currentMember.Amount;portfolioValues.DISPLAY.TotalInvestment=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.TotalInvestment,$filter('number'),'short',false);portfolioValues.RAW.Profit=portfolioValues.RAW.Total-portfolioValues.RAW.TotalInvestment;profitDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.Profit,$filter('number'),'short',false);if(portfolioValues.DISPLAY.Profit!=profitDisplay){visual.PROFIT=animationExpires;}
portfolioValues.DISPLAY.Profit=profitDisplay;portfolioValues.RAW.PctProfit=portfolioValues.RAW.Profit/portfolioValues.RAW.TotalInvestment*100;pctProfit=$filter('number')(portfolioValues.RAW.PctProfit,2)+"%";if(portfolioValues.DISPLAY.PctProfit!=pctProfit){visual.PCTPROFIT=animationExpires;}
portfolioValues.DISPLAY.PctProfit=pctProfit;portfolioValues.RAW.DayProfit=portfolioValues.RAW.Change24Hour*currentMember.Amount;currentDayProfitDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.DayProfit,$filter('number'),'short',false);if(portfolioValues.DISPLAY.DayProfit!=currentDayProfitDisplay){visual.DAYPROFITDISPLAY=animationExpires;}
portfolioValues.DISPLAY.DayProfit=currentDayProfitDisplay;portfolioValues.RAW.TotalBuyInvestment=currentMember.BuyPrice*currentMember.Amount;portfolioValues.DISPLAY.TotalBuyInvestment=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentMember.BuyCurrency),portfolioValues.RAW.TotalBuyInvestment,$filter('number'),'short',false);portfolioValues.RAW.TotalCurrentBuyValue=portfolioValues.RAW.BuyConversionPrice*currentMember.Amount;totalCurrentBuyValueDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentMember.BuyCurrency),portfolioValues.RAW.TotalCurrentBuyValue,$filter('number'),'short',false);if(portfolioValues.DISPLAY.TotalCurrentBuyValue!=totalCurrentBuyValueDisplay){visual.TOTALCURRENTBUYVALUE=animationExpires;}
portfolioValues.DISPLAY.TotalCurrentBuyValue=totalCurrentBuyValueDisplay;portfolioValues.RAW.ProfitBuyValue=portfolioValues.RAW.TotalCurrentBuyValue-portfolioValues.RAW.TotalBuyInvestment;profitBuyValueDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(currentMember.BuyCurrency),portfolioValues.RAW.ProfitBuyValue,$filter('number'),'short',false);if(portfolioValues.DISPLAY.ProfitBuyValue!=profitBuyValueDisplay){visual.PROFITBUYVALUE=animationExpires;}
portfolioValues.DISPLAY.ProfitBuyValue=profitBuyValueDisplay;portfolioValues.RAW.PctProfitBuyValue=portfolioValues.RAW.ProfitBuyValue/portfolioValues.RAW.TotalBuyInvestment*100;pctProfitBuyValue=$filter('number')(portfolioValues.RAW.PctProfitBuyValue,2)+"%";if(portfolioValues.DISPLAY.PctProfitBuyValue!=pctProfitBuyValue){visual.PCTPROFITBUYVALUE=animationExpires;}
portfolioValues.DISPLAY.PctProfitBuyValue=pctProfitBuyValue;currentMember.PriceInfo.Visual=visual;}
portfolio.Stats.TotalHoldings+=portfolioValues.RAW.Total;portfolio.Stats.TotalProfit+=portfolioValues.RAW.Profit;portfolio.Stats.DayProfit+=portfolioValues.RAW.DayProfit;}
totalHoldingsDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.TotalHoldings,$filter('number'),'short',false);if(portfolio.Stats.TotalHoldingsDisplay!=totalHoldingsDisplay){portfolio.Stats.Visual.TOTALHOLDINGSDISPLAY=animationExpires;}
portfolio.Stats.TotalHoldingsDisplay=totalHoldingsDisplay;totalProfitDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.TotalProfit,$filter('number'),'short',false);if(portfolio.Stats.TotalProfitDisplay!=totalProfitDisplay){portfolio.Stats.Visual.TOTALPROFITDISPLAY=animationExpires;}
portfolio.Stats.TotalProfitDisplay=totalProfitDisplay;portfolio.Stats.TotalProfitPct=portfolio.Stats.TotalProfit/(portfolio.Stats.TotalHoldings-portfolio.Stats.TotalProfit)*100;totalProfitPctDisplay=$filter('number')(portfolio.Stats.TotalProfitPct,2)+"%";if(portfolio.Stats.TotalProfitPctDisplay!=totalProfitPctDisplay){portfolio.Stats.Visual.TOTALPROFITPCTDISPLAY=animationExpires;}
portfolio.Stats.TotalProfitPctDisplay=totalProfitPctDisplay;dayProfitDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.DayProfit,$filter('number'),'short',false);if(portfolio.Stats.DayProfitDisplay!=dayProfitDisplay){portfolio.Stats.Visual.DAYPROFITDISPLAY=animationExpires;}
portfolio.Stats.DayProfitDisplay=dayProfitDisplay;portfolio.Stats.DayProfitPct=portfolio.Stats.DayProfit/(portfolio.Stats.TotalHoldings-portfolio.Stats.DayProfit)*100;dayProfitPctDisplay=$filter('number')(portfolio.Stats.DayProfitPct,2)+"%";if(portfolio.Stats.DayProfitPctDisplay!=dayProfitPctDisplay){portfolio.Stats.Visual.DAYPROFITPCTDISPLAY=animationExpires;}
portfolio.Stats.DayProfitPctDisplay=dayProfitPctDisplay;portfolio.Stats.TotalInvestment=portfolio.Stats.TotalHoldings-portfolio.Stats.TotalProfit;totalInvestmentDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.TotalInvestment,$filter('number'),'short',false);if(portfolio.Stats.TotalInvestmentDisplay!=totalInvestmentDisplay){portfolio.Stats.Visual.TOTALINVESTMENTDISPLAY=animationExpires;}
portfolio.Stats.TotalInvestmentDisplay=totalInvestmentDisplay;portfolio.Stats.NetRealized=portfolio.Stats.RealizedProfit-portfolio.Stats.TotalInvestment;portfolio.Stats.NetRealizedDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.NetRealized,$filter('number'),'short',false);;if(portfolio.IsCollapsed==true){this.generateCollapsedPortfolioStats(portfolio);}}else{portfolio.Stats.Visual={'TOTALHOLDINGSDISPLAY':false,'TOTALPROFITDISPLAY':false};portfolio.Stats.TotalProfitDisplay="0.00";portfolio.Stats.TotalInvestmentDisplay="0.00";portfolio.Stats.TotalProfitPctDisplay="0%";portfolio.Stats.TotalHoldingsDisplay="0.00";portfolio.Stats.DayProfit="0.00";portfolio.Stats.DayProfitPct="0%";portfolio.Stats.NetRealizedDisplay="0.00";}},generateCollapsedPortfolioSellStats:function(portfolio){var membersTogether={};var tempMembersArray=[];if(portfolio.SoldMembers.length>0){for(var i=0,length=portfolio.SoldMembers.length;i<length;i++){var symbol=portfolio.SoldMembers[i].Coin.Symbol;if(membersTogether.hasOwnProperty(portfolio.SoldMembers[i].Coin.Symbol)){membersTogether[symbol].push(i);}else{membersTogether[symbol]=[i];}}}
for(var memberSymbol in membersTogether){var totalPositions=membersTogether[memberSymbol].length;var currrentMemberBySymbol={};if(totalPositions>=1){var weHaveInfo=true;var currentPortfolioMember=portfolio.SoldMembers[membersTogether[memberSymbol][0]];currrentMemberBySymbol.Coin=currentPortfolioMember.Coin;currrentMemberBySymbol.PriceInfo={'PortfolioValues':{'RAW':{'Price':1,'Open24Hour':1},'DISPLAY':{}},'Current':{'RAW':{},'DISPLAY':{}},'Conversion':{'RAW':{},'DISPLAY':{}},'SubOne':{'RAW':{},'DISPLAY':{}},'CurrentBuy':{'RAW':{},'DISPLAY':{}},'ConversionBuy':{'RAW':{},'DISPLAY':{}},'ConversionBuySubOne':{'RAW':{},'DISPLAY':{}},'Visual':{}}
currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Price=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Price;currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.Price=currentPortfolioMember.PriceInfo.PortfolioValues.DISPLAY.Price;currrentMemberBySymbol.SubConvInfoBuy={Conversion:'NotNeeded'};currrentMemberBySymbol.SubInfo={Conversion:'NotNeeded'};currrentMemberBySymbol.Amount=currentPortfolioMember.Amount;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Total=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Total;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Profit;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue;currrentMemberBySymbol.SoldOnTs=currentPortfolioMember.SoldOnTs;currrentMemberBySymbol.BuyPriceTotal=currrentMemberBySymbol.Amount*currentPortfolioMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted;currrentMemberBySymbol.SoldDescription="Sold On: "+$filter('date')(new Date(currentPortfolioMember.SoldOnTs*1000),"dd MMMM yyyy");if(totalPositions==1){currrentMemberBySymbol.SoldInfoBottom=totalPositions+" position closed.";}else{currrentMemberBySymbol.SoldInfoBottom=totalPositions+" positions closed.";}
for(var i=1,length=totalPositions;i<length;i++){var currentPortfolioMember=portfolio.SoldMembers[membersTogether[memberSymbol][i]];currrentMemberBySymbol.Amount+=currentPortfolioMember.Amount;currrentMemberBySymbol.BuyPriceTotal+=currentPortfolioMember.Amount*currentPortfolioMember.PriceInfo.PortfolioValues.RAW.BuyPriceConverted;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Total+=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Total;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit+=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.Profit;currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue+=currentPortfolioMember.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue;currrentMemberBySymbol.SoldDescription+=', '+$filter('date')(new Date(currentPortfolioMember.BoughtOnTs*1000),"dd MMMM yyyy");}
currrentMemberBySymbol.Amount=parseFloat(currrentMemberBySymbol.Amount.toFixed(8));var averagePricePaid=currrentMemberBySymbol.BuyPriceTotal/currrentMemberBySymbol.Amount;currrentMemberBySymbol.DisplayBuyPrice=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),averagePricePaid,$filter('number'));currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.Total=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Total,$filter('number'),'short',false);currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.Profit=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit,$filter('number'),'short',false);currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.TotalCurrentBuyValue=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue,$filter('number'),'short',false);currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue=currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.Profit/currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue*100;currrentMemberBySymbol.PriceInfo.PortfolioValues.DISPLAY.PctProfitBuyValue=$filter('number')(currrentMemberBySymbol.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue,2)+"%";tempMembersArray.push(currrentMemberBySymbol);}}
membersTogether=null;portfolio.SoldMembersCollapsed=tempMembersArray;},generatePortfolioSellStats:function(portfolio){portfolio.Stats.RealizedProfit=0;portfolio.Stats.Realized=0;portfolio.Stats.NetRealized=0;if(portfolio.SoldMembers.length>0){for(var i=0,length=portfolio.SoldMembers.length;i<length;i++){var currentMember=portfolio.SoldMembers[i];if(!currentMember.hasOwnProperty('PriceInfo')){continue;};if(!currentMember.PriceInfo.hasOwnProperty('PortfolioValues')){continue;};var portfolioValues=currentMember.PriceInfo.PortfolioValues;portfolioValues.DISPLAY.Price=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.Price,$filter('number'));portfolioValues.DISPLAY.BuyPriceConverted=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.BuyPriceConverted,$filter('number'));portfolioValues.RAW.Total=portfolioValues.RAW.Price*currentMember.Amount;portfolioValues.DISPLAY.Total=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.Total,$filter('number'),'short',false);portfolioValues.RAW.TotalCurrentBuyValue=portfolioValues.RAW.BuyPriceConverted*currentMember.Amount;portfolioValues.DISPLAY.TotalCurrentBuyValue=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.TotalCurrentBuyValue,$filter('number'),'short',false);;portfolioValues.RAW.Profit=portfolioValues.RAW.Total-portfolioValues.RAW.TotalCurrentBuyValue;portfolioValues.DISPLAY.Profit=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolioValues.RAW.Profit,$filter('number'),'short',false);;portfolioValues.RAW.PctProfitBuyValue=portfolioValues.RAW.Profit/portfolioValues.RAW.TotalCurrentBuyValue*100;portfolioValues.DISPLAY.PctProfitBuyValue=$filter('number')(portfolioValues.RAW.PctProfitBuyValue,2)+"%";;portfolio.Stats.Realized+=portfolioValues.RAW.Total;portfolio.Stats.RealizedProfit+=portfolioValues.RAW.Profit;}
portfolio.Stats.RealizedProfitDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.RealizedProfit,$filter('number'),'short',false);;portfolio.Stats.RealizedDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.Realized,$filter('number'),'short',false);portfolio.Stats.NetRealized=portfolio.Stats.RealizedProfit-portfolio.Stats.TotalInvestment;portfolio.Stats.NetRealizedDisplay=utilStatic.convertValueToDisplay(displayCurrency.getSymbol(portfolio.Currency),portfolio.Stats.NetRealized,$filter('number'),'short',false);;this.generateCollapsedPortfolioSellStats(portfolio);}else{portfolio.Stats.RealizedProfitDisplay="0.00";portfolio.Stats.RealizedDisplay="0.00";portfolio.Stats.NetRealizedDisplay="0.00";}},loadSinglePortfolioDataFromApi:function(id){return $http.get("/api/portfolio/get/portfolios/?id="+id);},loadPortfolioDataFromApi:function(){return $http.get("/api/portfolio/get/portfolios/");},loadPortfolioSummaryFromApi:function(){return $http.get("/api/portfolio/get/portfoliosummary/");},coinAdd:function(newPortfolioMember){var paramsForCall={};paramsForCall['portfolioId']=newPortfolioMember.PortfolioId;paramsForCall['coinId']=newPortfolioMember.Coin.Id;paramsForCall['amount']=newPortfolioMember.Amount;if(newPortfolioMember.BuyPriceType=="total"){paramsForCall['buyPrice']=utilStatic.reduceReal(newPortfolioMember.BuyPrice/newPortfolioMember.Amount).toString();}else{paramsForCall['buyPrice']=newPortfolioMember.BuyPrice;}
paramsForCall['buyCurrency']=newPortfolioMember.BuyCurrency;paramsForCall['storedIn']=newPortfolioMember.StoredIn||"";paramsForCall['address']=newPortfolioMember.Address||"";paramsForCall['walletName']=newPortfolioMember.WalletName||"";paramsForCall['exchangeName']=newPortfolioMember.ExchangeName||"";paramsForCall['description']=newPortfolioMember.Description||"";paramsForCall['boughtOnTs']=Math.floor(newPortfolioMember.BoughtOn.getTime()/1000);return $http.post("/api/portfolio/post/coinadd/",paramsForCall);},coinDelete:function(id){var paramsForCall={};paramsForCall['id']=id;return $http.post("/api/portfolio/post/coindelete/",paramsForCall);},coinReverseDelete:function(id){var paramsForCall={};paramsForCall['id']=id;return $http.post("/api/portfolio/post/coinreversedelete/",paramsForCall);},coinUpdate:function(portfolioMember){var paramsForCall={};paramsForCall['id']=portfolioMember.Id;paramsForCall['amount']=portfolioMember.Amount;if(portfolioMember.BuyPriceType=="total"){paramsForCall['buyPrice']=utilStatic.reduceReal(portfolioMember.BuyPrice/portfolioMember.Amount).toString();}else{paramsForCall['buyPrice']=portfolioMember.BuyPrice;}
paramsForCall['buyCurrency']=portfolioMember.BuyCurrency;paramsForCall['storedIn']=portfolioMember.StoredIn||"";paramsForCall['address']=portfolioMember.Address||"";paramsForCall['walletName']=portfolioMember.WalletName||"";paramsForCall['exchangeName']=portfolioMember.ExchangeName||"";paramsForCall['description']=portfolioMember.Description||"";paramsForCall['boughtOnTs']=Math.floor(portfolioMember.BoughtOn.getTime()/1000);if(portfolioMember.Sold){paramsForCall['sellAmount']=portfolioMember.SellAmount;if(portfolioMember.SellPriceType=="total"){paramsForCall['sellPrice']=utilStatic.reduceReal(portfolioMember.SellPrice/portfolioMember.SellAmount).toString();}else{paramsForCall['sellPrice']=portfolioMember.SellPrice;}
paramsForCall['sellCurrency']=portfolioMember.SellCurrency;paramsForCall['soldOnTs']=Math.floor(portfolioMember.SoldOn.getTime()/1000);paramsForCall['soldDescription']=portfolioMember.SoldDescription||"";}
return $http.post("/api/portfolio/post/coinupdate/",paramsForCall);},coinSell:function(portfolioMember){var paramsForCall={};paramsForCall['id']=portfolioMember.Id;paramsForCall['sellAmount']=portfolioMember.SellAmount;if(portfolioMember.SellPriceType=="total"){paramsForCall['sellPrice']=utilStatic.reduceReal(portfolioMember.SellPrice/portfolioMember.SellAmount).toString();}else{paramsForCall['sellPrice']=portfolioMember.SellPrice;}
paramsForCall['sellCurrency']=portfolioMember.SellCurrency;paramsForCall['soldOnTs']=Math.floor(portfolioMember.SoldOn.getTime()/1000);paramsForCall['soldDescription']=portfolioMember.SoldDescription;return $http.post("/api/portfolio/post/coinsell/",paramsForCall);},add:function(name,currency,description,access,encryption){var paramsForCall={};paramsForCall['name']=name;paramsForCall['currency']=currency;paramsForCall['description']=description;paramsForCall['access']=access;paramsForCall['encryption']=encryption;return $http.post("/api/portfolio/post/create/",paramsForCall);},delete:function(id){var paramsForCall={};paramsForCall['id']=id;return $http.post("/api/portfolio/post/delete/",paramsForCall);},reverseDelete:function(id){var paramsForCall={};paramsForCall['id']=id;return $http.post("/api/portfolio/post/reversedelete/",paramsForCall);},update:function(portfolioData){var paramsForCall={};paramsForCall['id']=portfolioData.Id;paramsForCall['name']=portfolioData.Name;paramsForCall['currency']=portfolioData.Currency;paramsForCall['description']=portfolioData.Description;paramsForCall['access']=portfolioData.Access;paramsForCall['encryption']=portfolioData.Encryption;return $http.post("/api/portfolio/post/update/",paramsForCall);},hasTopAd:function(){return portfolioSponsor.HasSponsor;},getAdLink:function(){return portfolioSponsor.Link||"";},getAdImage:function(){return portfolioSponsor.ImageUrl||"";},getAdText:function(){return portfolioSponsor.TextForButton||"";},getAdBackgroundColor:function(){return portfolioSponsor.BackgroundColor||"#FAFAFA";},getAdTextColor:function(){return portfolioSponsor.TextColor||"#212121";}};}]);angular.module('ccc-app').service('portfolioModalService',['$mdDialog','$mdMedia',function($mdDialog,$mdMedia){var showingCoinDialog=false;var showingAddPortfolio=false;var showingPopup=false;this.showPopup=function(title,description,ev){$mdDialog.show($mdDialog.alert().clickOutsideToClose(true).title(title).htmlContent(description).ariaLabel('Showing portfolio description').ok("Close"));};this.showCoinDialog=function(obj){if(showingCoinDialog){return false;}
showingCoinDialog=true;var useFullScreen=($mdMedia('sm')||$mdMedia('xs'));var modalInstance=$mdDialog.show({controller:'PortfolioAddCoinModalCtrl',templateUrl:'/angular/portfolio/addcoin/',fullscreen:useFullScreen,escapeToClose:true,locals:{initObj:obj}});modalInstance.then(function(answer){showingCoinDialog=false;},function(){showingCoinDialog=false;});};this.showPortfolioDialog=function(obj){if(showingAddPortfolio){return false;}
showingAddPortfolio=true;var useFullScreen=($mdMedia('sm')||$mdMedia('xs'));var modalInstance=$mdDialog.show({controller:'PortfolioAddModalCtrl',templateUrl:'/angular/portfolio/add/',fullscreen:useFullScreen,escapeToClose:true,locals:{initObj:obj}});modalInstance.then(function(answer){showingAddPortfolio=false;},function(){showingAddPortfolio=false;});};}]);;;;angular.module('ccc-app').factory('listsBehaviour',['$location','$filter','$http',function listsBehaviourFactory($location,$filter,$http){var utilStatic=CCC.STATIC.UTIL;var acceptedTabs=[];var defaultFilter={};var hasDefaultFilter=false;var addToUrl=true;var filterTypes=[];var sorters=[];var currentSorter;var viewStepSize=30;var currentViewSize=viewStepSize;var allData=[];var commonTabData={};var filteredData=[];var filters=[];var auxData={};var increaseTabSize=function(tabIndex,dataIndex){if(acceptedTabs[tabIndex].FilterField=="NoFilter"){acceptedTabs[tabIndex].Size++;}else{if(acceptedTabs[tabIndex].FilterValue=="ArrayHasData"){if(allData[dataIndex][acceptedTabs[tabIndex].FilterField].length>0){acceptedTabs[tabIndex].Size++;}}else if(acceptedTabs[tabIndex].FilterValue=="SpecialFilter"){if(acceptedTabs[tabIndex].SpecialFilter(allData[dataIndex])){acceptedTabs[tabIndex].Size++;}}else{if(allData[dataIndex][acceptedTabs[tabIndex].FilterField]==acceptedTabs[tabIndex].FilterValue){acceptedTabs[tabIndex].Size++;}}}}
var calculateTabSizes=function(){var tabsLength=acceptedTabs.length;var currentTabIndex=tabPosition(filters[0].value);var currentTab=acceptedTabs[currentTabIndex];for(var i=0;i<tabsLength;i++){acceptedTabs[i].Size=0}
for(var i=0,length=allData.length;i<length;i++){if(currentTab["OnlyCurrentSize"]){increaseTabSize(currentTabIndex,i);}else{for(var j=0;j<tabsLength;j++){increaseTabSize(j,i);}}}};var tabPosition=function(tabName){for(var i=0,length=acceptedTabs.length;i<length;i++){if(acceptedTabs[i].Id==tabName){return i;}}
return-1;};var filterTypePosition=function(filterField){for(var i=0,length=filterTypes.length;i<length;i++){if(filterTypes[i].FilterField==filterField){return i;}}
return-1;};var filterPosition=function(newFilter){for(var i=0,length=filters.length;i<length;i++){if(filters[i].type==newFilter.type&&filters[i].value==newFilter.value){return i;}}
return-1;};var applyTabFilter=function(filterName){var tempDisplay=[];var tab=acceptedTabs[tabPosition(filterName)];if(tab.FilterField=="NoFilter"){return allData;}
for(var i=0,length=allData.length;i<length;i++){if(tab.FilterValue=="ArrayHasData"){if(allData[i][tab.FilterField].length>0){tempDisplay.push(allData[i]);}}else if(tab.FilterValue=="SpecialFilter"){if(tab.SpecialFilter(allData[i])){tempDisplay.push(allData[i]);}}else{if(allData[i][tab.FilterField]==tab.FilterValue){tempDisplay.push(allData[i]);}}}
return tempDisplay;};var generateFilterOptions=function(){for(var i=0,length=filterTypes.length;i<length;i++){filterTypes[i].Options={};}
for(var i=0,length=filteredData.length;i<length;i++){addToFilterOptions(filteredData[i]);}};var generateFilterOptionsArray=function(){for(var i=0,length=filterTypes.length;i<length;i++){filterTypes[i].OptionsArray=[];for(var optionName in filterTypes[i].Options){filterTypes[i].OptionsArray.push({'Key':optionName,'Value':filterTypes[i].Options[optionName]});}
filterTypes[i].OptionsArray.sort(function(a,b){return b.Value-a.Value});}};var addFilter=function(filterToAdd){if(filterToAdd.type=="Tab"){filteredData=applyTabFilter(filterToAdd.value);return;}
if(filterToAdd.type=="Default"){var tempData=filteredData;filteredData=defaultFilter.FilterToRun(tempData);acceptedTabs[tabPosition(filters[0].value)].Size=filteredData.length;return;}
var currentFilterType=filterTypes[filterTypePosition(filterToAdd.type)];switch(currentFilterType.Type){case"FieldValue":var tempFilteredData=[];for(var i=0,length=filteredData.length;i<length;i++){if(filteredData[i][filterToAdd.type]==filterToAdd.value){tempFilteredData.push(filteredData[i]);}}
filteredData=tempFilteredData;break;case"ArrayValue":var tempFilteredData=[];for(var i=0,length=filteredData.length;i<length;i++){if(filteredData[i][filterToAdd.type].indexOf(filterToAdd.value)>-1){tempFilteredData.push(filteredData[i]);}}
filteredData=tempFilteredData;break;case"SpecialFilter":filteredData=currentFilterType.SpecialFilter(filteredData,filterToAdd);break;case"MoreThanOrEqual":var tempFilteredData=[];for(var i=0,length=filteredData.length;i<length;i++){if(filteredData[i][filterToAdd.type]>=filterToAdd.value){tempFilteredData.push(filteredData[i]);}}
filteredData=tempFilteredData;break;case"LessThanOrEqual":var tempFilteredData=[];for(var i=0,length=filteredData.length;i<length;i++){if(filteredData[i][filterToAdd.type]<=filterToAdd.value){tempFilteredData.push(filteredData[i]);}}
filteredData=tempFilteredData;break;}};var resetViewSizeAndLength=function(){var filteredDataLength=filteredData.length;if(viewStepSize<filteredDataLength){currentViewSize=viewStepSize;}else{currentViewSize=filteredDataLength;}
acceptedTabs[tabPosition(filters[0].value)].Size=filteredDataLength;};var applyFilters=function(filtersToApply){for(var i=0,length=filtersToApply.length;i<length;i++){addFilter(filtersToApply[i]);}
applySort(filteredData);generateFilterOptions();generateFilterOptionsArray();resetViewSizeAndLength();};var addToFilterOptions=function(item){var currentTabId=filters[0]['value'];for(var i=0,length=filterTypes.length;i<length;i++){var currentFilter=filterTypes[i];if(currentFilter.DisplayOn.indexOf(currentTabId)>-1){switch(currentFilter.Type){case"FieldValue":if(item[currentFilter.FilterField]){var itemValue=item[currentFilter.FilterField];if(currentFilter.Options.hasOwnProperty(itemValue)){currentFilter.Options[itemValue]++;}else{currentFilter.Options[itemValue]=1;}}
break;case"ArrayValue":for(var j=0,lengthArray=item[currentFilter.FilterField].length;j<lengthArray;j++){if(currentFilter.Options.hasOwnProperty(item[currentFilter.FilterField][j])){currentFilter.Options[item[currentFilter.FilterField][j]]++;}else{currentFilter.Options[item[currentFilter.FilterField][j]]=1;}}
break;case"SpecialFilter":currentFilter.SpecialFilterOptions(item,currentFilter);break;}}}};var applySort=function(dataToSort){var primaryField=currentSorter.PrimaryField;var secondaryField=currentSorter.SecondaryField||"";var secondaryType=currentSorter.SecondaryType||"Numeric";var excludeField=currentSorter.ExcludeField||"";var keepSponsoredFirst=currentSorter.KeepSponsoredFirst||false;currentSorter.Applied=true;dataToSort.sort(function(a,b){var aData=a;var bData=b;var excludedAData=a;var excludedBData=b;if(currentSorter.IsObject){aData=a[currentSorter.ObjectName];bData=b[currentSorter.ObjectName];}
if(currentSorter.IsObjectExcluded){excludedAData=a[currentSorter.ExcludedObjectName];excludedBData=b[currentSorter.ExcludedObjectName];}
if(currentSorter.Type=='Numeric'){var aDataPrimaryField;var bDataPrimaryField;if(!aData.hasOwnProperty(primaryField)){aDataPrimaryField=0}else{aDataPrimaryField=parseFloat(aData[primaryField]);}
if(!bData.hasOwnProperty(primaryField)){bDataPrimaryField=0}else{bDataPrimaryField=parseFloat(bData[primaryField]);}
if(currentSorter.IsAscending){if(excludeField!=""){if(excludedAData[excludeField]==currentSorter.ExcludeFieldValue){return 1;}
if(excludedBData[excludeField]==currentSorter.ExcludeFieldValue){return-1;}}
var valueToReturn=aDataPrimaryField-bDataPrimaryField;if(valueToReturn==0&&secondaryField.length>0){if(secondaryType=='Numeric'){var aDataSecondaryField;var bDataSecondaryField;if(!aData.hasOwnProperty(secondaryField)){aDataSecondaryField=0}else{aDataSecondaryField=parseFloat(aData[secondaryField]);}
if(!bData.hasOwnProperty(secondaryField)){bDataSecondaryField=0}else{bDataSecondaryField=parseFloat(bData[secondaryField]);}
return aDataSecondaryField-bDataSecondaryField;}else{var aDataSecondaryField=aData[secondaryField]||"";var bDataSecondaryField=bData[secondaryField]||"";if(aDataSecondaryField<bDataSecondaryField){return-1;}
if(aDataSecondaryField>bDataSecondaryField){return 1;}
return 0;}}
return valueToReturn;}else{if(excludeField!=""){if(excludedAData[excludeField]==currentSorter.ExcludeFieldValue){return 1;}
if(excludedBData[excludeField]==currentSorter.ExcludeFieldValue){return-1;}}
var valueToReturn=bDataPrimaryField-aDataPrimaryField;if(valueToReturn==0&&secondaryField.length>0){if(secondaryType=='Numeric'){var aDataSecondaryField;var bDataSecondaryField;if(!aData.hasOwnProperty(secondaryField)){aDataSecondaryField=0}else{aDataSecondaryField=parseFloat(aData[secondaryField]);}
if(!bData.hasOwnProperty(secondaryField)){bDataSecondaryField=0}else{bDataSecondaryField=parseFloat(bData[secondaryField]);}
return bDataSecondaryField-aDataSecondaryField;}else{var aDataSecondaryField=aData[secondaryField]||"";var bDataSecondaryField=bData[secondaryField]||"";if(aDataSecondaryField<bDataSecondaryField){return-1;}
if(aDataSecondaryField>bDataSecondaryField){return 1;}
return 0;}}
return valueToReturn;}}else{var aDataPrimaryField=aData[primaryField];var bDataPrimaryField=bData[primaryField];if(aDataPrimaryField<bDataPrimaryField){if(currentSorter.IsAscending){return-1;}else{return 1;}}
if(aDataPrimaryField>bDataPrimaryField){if(currentSorter.IsAscending){return 1;}else{return-1;}}}
return 0;});for(var iDTS=0,lDTS=dataToSort.length;iDTS<lDTS;iDTS++){dataToSort[iDTS].Rank=iDTS+1;}
if(keepSponsoredFirst){dataToSort.sort(function(a,b){if(a['Sponsored']===true){return-1;}
if(b['Sponsored']===true){return 1;}
return a.Rank-b.Rank;});}}
return{setDefaultFilter:function(filter){defaultFilter=filter;hasDefaultFilter=true;},setInitData:function(initialData){allData=initialData.Data;},setInitPortfolioData:function(initialData){allData=initialData.Data;var totalImagesToShow=3;for(var i=0,length=allData.length;i<length;i++){allData[i].DisplayTotalViews=utilStatic.convertValueToDisplay('',allData[i].TotalViews,$filter('number'),'short',true);allData[i].TotalCoins=allData[i].Members.length;allData[i].TotalSoldCoins=allData[i].SoldMembers.length;allData[i].CoinHolding=[];allData[i].SoldCoins=[];allData[i].DisplayMembers=[];allData[i].DisplaySoldMembers=[];for(var iMembers=0;iMembers<allData[i].TotalCoins;iMembers++){var symbol=allData[i].Members[iMembers].Coin.Symbol;if(allData[i].CoinHolding.indexOf(symbol)===-1){allData[i].CoinHolding.push(symbol);if(allData[i].DisplayMembers.length<totalImagesToShow){allData[i].DisplayMembers.push(allData[i].Members[iMembers].Coin);}}}
for(var iSoldMembers=0;iSoldMembers<allData[i].TotalSoldCoins;iSoldMembers++){var symbol=allData[i].SoldMembers[iSoldMembers].Coin.Symbol;if(allData[i].SoldCoins.indexOf(symbol)===-1){allData[i].SoldCoins.push(symbol);if(allData[i].DisplaySoldMembers.length<totalImagesToShow){allData[i].DisplaySoldMembers.push(allData[i].SoldMembers[iSoldMembers].Coin);}}}
allData[i].TotalCoins=allData[i].CoinHolding.length;allData[i].TotalSoldCoins=allData[i].SoldCoins.length;};},addMiningToInitData:function(miningDataToAdd){for(var id in miningDataToAdd){allData.push(miningDataToAdd[id]);}},addWalletsToInitData:function(walletData){for(var id in walletData){allData.push(walletData[id]);}},addGamblingToInitData:function(gamblingData){for(var id in gamblingData){allData.push(gamblingData[id]);}},resetAllData:function(){allData=[];},addToAllData:function(streamObject){var objectToAdd=streamObject;objectToAdd.CommonData=commonTabData[objectToAdd.DATA.FROMSYMBOL];objectToAdd.Sponsored=commonTabData[objectToAdd.DATA.FROMSYMBOL].Sponsored;allData.push(objectToAdd);},updateFieldData:function(index,updateField,updatedObject){allData[index][updateField]=updatedObject;},setCommonTabData:function(apiResponse){commonTabData=apiResponse.Data;},setAddToUrl:function(value){addToUrl=value;},setICOTabData:function(apiResponse){allData=[];commonTabData=apiResponse.Data;for(var key in commonTabData){var dataObj={};var displayObj={};var coin=commonTabData[key];coin.Symbol=key;var coinsOffered=0;var percent=parseFloat(coin.ICOTokenPercentageForInvestors);var tokens=parseInt(coin.ICOTokenSupply);if(isNaN(percent)||percent==0||isNaN(tokens)||tokens==0){dataObj.ICOCOINSOFFERED=0;displayObj.ICOCOINSOFFERED="-";}else{var offered=percent/100*tokens;dataObj.ICOCOINSOFFERED=offered;displayObj.ICOCOINSOFFERED=utilStatic.convertValueToDisplay("",offered,$filter('number'),'short');displayObj.ICOCOINSOFFERED+=" ("+utilStatic.convertValueToDisplay("",coin.ICOTokenPercentageForInvestors,$filter('number'),'short')+"%)";}
coin.ICOStartPrice=parseFloat(coin.ICOStartPrice);if(isNaN(coin.ICOStartPrice)){dataObj.ICOSTARTPRICE=0;displayObj.ICOSTARTPRICE="-";}else if(coin.ICOStartPriceCurrency=="USD"){dataObj.ICOSTARTPRICE=coin.ICOStartPrice;displayObj.ICOSTARTPRICE=utilStatic.convertValueToDisplay('$',coin.ICOStartPrice,$filter('number'));}
if(!isNaN(coin.ICOFundsRaisedUSD)&&!isNaN(dataObj.ICOCOINSOFFERED)&&coin.ICOFundsRaisedUSD>0&&dataObj.ICOCOINSOFFERED>0){var averagePrice=coin.ICOFundsRaisedUSD/dataObj.ICOCOINSOFFERED;dataObj.ICOPRICE=averagePrice;displayObj.ICOPRICE=utilStatic.convertValueToDisplay('$',averagePrice,$filter('number'));}else{dataObj.ICOPRICE=0;displayObj.ICOPRICE="-";}
if(isNaN(coin.ICOFundsRaisedUSD)||coin.ICOFundsRaisedUSD==0){dataObj.ICOFUNDSRAISEDUSD=0;displayObj.ICOFUNDSRAISEDUSD="-";}else{dataObj.ICOFUNDSRAISEDUSD=coin.ICOFundsRaisedUSD;displayObj.ICOFUNDSRAISEDUSD=utilStatic.convertValueToDisplay('$',coin.ICOFundsRaisedUSD,$filter('number'),'short');}
dataObj.CHANGEPCT24HOUR=0;displayObj.CHANGEPCT24HOUR="-";dataObj.CHANGE24HOUR=0;displayObj.CHANGE24HOUR="-";allData.push({CommonData:commonTabData[key],Coin:{},DATA:dataObj,DISPLAY:displayObj,Subs:[],VISUAL:{},AllSubsLoaded:false,Sponsored:commonTabData[key].Sponsored});}},addBlockExporerToCommonTabData:function(apiResponse){var blockExporerData=apiResponse['Data'];for(var symbol in blockExporerData){if(commonTabData.hasOwnProperty(symbol)){for(var blockExplorerProperty in blockExporerData[symbol]){if(blockExplorerProperty=="TotalCoinsMined"){if(commonTabData[symbol].PreMinedValue!="N/A"){commonTabData[symbol][blockExplorerProperty]=parseFloat(blockExporerData[symbol][blockExplorerProperty])-parseFloat(commonTabData[symbol].PreMinedValue);}else{commonTabData[symbol][blockExplorerProperty]=blockExporerData[symbol][blockExplorerProperty];}}else{commonTabData[symbol][blockExplorerProperty]=blockExporerData[symbol][blockExplorerProperty];}}}}},getCommonTabDataField:function(key,field,fieldType){if(commonTabData.hasOwnProperty(key)){if(commonTabData[key].hasOwnProperty(field)){return commonTabData[key][field];}}
if(fieldType=='Number'){return 0;}else{return'-';}},hasCommonTabKey:function(key){return commonTabData.hasOwnProperty(key);},addTotalPosts:function(apiResponse){var totalPostsData=apiResponse['Total'];for(var i=0,length=allData.length;i<length;i++){allData[i]["Total"]=totalPostsData[allData[i]['Id']];};applySort(allData);},addReviews:function(apiResponse){var reviewData=apiResponse['Ratings'];for(var i=0,length=allData.length;i<length;i++){allData[i]["Rating"]=reviewData[allData[i]['Id']];};applySort(allData);},setLatestPostsData:function(latestPosts){var latestData=latestPosts.PostArray;for(var i=0,length=latestData.length;i<length;i++){latestData[i]['ItemType']="LatestPost";allData.push(latestData[i]);}},addPostStats:function(apiResponse){var statsData=apiResponse['Stats'];for(var i=0,length=allData.length;i<length;i++){if(statsData[allData[i]['Id']]){allData[i]["TotalActiviy"]=statsData[allData[i]['Id']].TotalActivity;allData[i]["LatestActiviy"]=statsData[allData[i]['Id']].LatestPost;allData[i]["PostTotal"]=statsData[allData[i]['Id']].PostTotal;allData[i]["DisplayPostTotal"]=utilStatic.convertValueToDisplay('',allData[i]["PostTotal"],$filter('number'),'short',true);allData[i]["CommentTotal"]=statsData[allData[i]['Id']].CommentTotal;allData[i]["DisplayCommentTotal"]=utilStatic.convertValueToDisplay('',allData[i]["CommentTotal"],$filter('number'),'short',true);allData[i]["Cryptopian"]=statsData[allData[i]['Id']].Cryptopian;allData[i]["PostBody"]=statsData[allData[i]['Id']].PostBody;allData[i]["ReplyTo"]=statsData[allData[i]['Id']].ReplyTo;allData[i]["IdForLinkItem"]=statsData[allData[i]['Id']].IdForLinkItem;}else{allData[i]["TotalActiviy"]=0;allData[i]["LatestActiviy"]=0;allData[i]["PostTotal"]=0;allData[i]["DisplayPostTotal"]=0;allData[i]["CommentTotal"]=0;allData[i]["DisplayCommentTotal"]=0;allData[i]["Cryptopian"]={'cId':'','cName':'','cAvatarUrl':''};allData[i]["PostBody"]="";allData[i]["ReplyTo"]=0;}};applySort(allData);},addTotalViews:function(apiResponse){var viewsData=apiResponse['Views'];for(var i=0,length=allData.length;i<length;i++){if(viewsData[allData[i]['Id']]){allData[i]["TotalViews"]=viewsData[allData[i]['Id']];allData[i]["DisplayTotalViews"]=utilStatic.convertValueToDisplay('',allData[i]["TotalViews"],$filter('number'),'short',true);}else{if(!allData[i]["TotalViews"]){allData[i]["TotalViews"]=0;allData[i]["DisplayTotalViews"]=0;}}};},setAcceptedTabs:function(tabsArray){acceptedTabs=tabsArray;},setFilterTypes:function(filterTypesArray){filterTypes=filterTypesArray;},setSorters:function(sortersArray){var defaultSorterSet=false;sorters=sortersArray;for(var i=0,length=sorters.length;i<length;i++){if(sorters[i].Applied==true){currentSorter=sorters[i];defaultSorterSet=true;}}
if(!defaultSorterSet){currentSorter=sorters[0];}},setViewStepSize:function(size){viewStepSize=size;currentViewSize=size;},getViewSize:function(size){return currentViewSize;},getTabs:function(){return acceptedTabs;},getAllData:function(){return allData;},getFiltered:function(){return filteredData.slice(0,currentViewSize);},getAllFiltered:function(){return filteredData;},getSorters:function(){return sorters;},getSorterOptions:function(index){return sorters[index];},getButtonFiltersForCurrentView:function(){var filterTypesForCurrentView=[];var currentTabId=this.getTabName();for(var i=0,length=filterTypes.length;i<length;i++){if(filterTypes[i].DisplayType=='Buttons'&&filterTypes[i].DisplayOn.indexOf(currentTabId)>-1){filterTypesForCurrentView.push(filterTypes[i]);}};return filterTypesForCurrentView;},getDropdownFiltersForCurrentView:function(){var filterTypesForCurrentView=[];var currentTabId=this.getTabName();for(var i=0,length=filterTypes.length;i<length;i++){if(filterTypes[i].DisplayType=='Dropdown'&&filterTypes[i].DisplayOn.indexOf(currentTabId)>-1){filterTypesForCurrentView.push(filterTypes[i]);}};return filterTypesForCurrentView;},getDatePickerFiltersForCurrentView:function(){var filterTypesForCurrentView=[];var currentTabId=this.getTabName();for(var i=0,length=filterTypes.length;i<length;i++){if(filterTypes[i].DisplayType=='DatePicker'&&filterTypes[i].DisplayOn.indexOf(currentTabId)>-1){filterTypesForCurrentView.push(filterTypes[i]);}};return filterTypesForCurrentView;},getAllFiltersForCurrentView:function(){var filterTypesForCurrentView=[];var currentTabId=this.getTabName();for(var i=0,length=filterTypes.length;i<length;i++){if(filterTypes[i].DisplayOn.indexOf(currentTabId)>-1){filterTypesForCurrentView.push(filterTypes[i]);}};return filterTypesForCurrentView;},getFilterPositionInCurrentView:function(filterField){var currentTabId=this.getTabName();var position=0;for(var i=0,length=filterTypes.length;i<length;i++){if(filterTypes[i].DisplayOn.indexOf(currentTabId)>-1){if(filterTypes[i].FilterField==filterField){return position;};position++;}};return position;},getTabName:function(){if(filters.length)
return filters[0].value;return acceptedTabs[0].Id;},getTabPosition:function(){if(filters.length)
return tabPosition(filters[0].value);return-1;},getTabObject:function(id){for(var i=0,length=acceptedTabs.length;i<length;i++){if(acceptedTabs[i].Id==id){return acceptedTabs[i];}}
return{};},hasData:function(filterField){var currentFilter=filterTypes[filterTypePosition(filterField)];return Object.keys(currentFilter.Options).length>0;},getFilterOptions:function(filterField){var currentFilter=filterTypes[filterTypePosition(filterField)];return currentFilter.Options;},getFilterOptionsArray:function(filterField){var currentFilter=filterTypes[filterTypePosition(filterField)];return currentFilter.OptionsArray;},getFilterTypesArray:function(){return filterTypes;},hasFilterFilters:function(){if(hasDefaultFilter){return filters.length>2;}else{return filters.length>1;}},isApplied:function(filterField,filterValue){return filterPosition({"type":filterField,'value':filterValue})>-1;},getSelectedText:function(filterField){var currentFilter=filterTypes[filterTypePosition(filterField)];var selectedText=currentFilter.DisplayName+': ';var filterKeys=Object.keys(currentFilter.Options);if(filterKeys.length==1){selectedText+=filterKeys[0]+', ';}else{for(var i=0,length=filters.length;i<length;i++){if(filters[i].type==currentFilter.FilterType){selectedText+=filters[i].value+', ';}}}
selectedText=selectedText.slice(0,-2);if(selectedText.length>38){selectedText=selectedText.substring(0,35)+'...';}
return selectedText;},showDropdown:function(filterField){var currentFilter=filterTypes[filterTypePosition(filterField)];return Object.keys(currentFilter.Options).length>1;},filterBy:function(filterField,filterValue){var newFilter={"type":filterField,'value':filterValue};var newFilterPos=filterPosition(newFilter);var newFilterPositionInView=this.getFilterPositionInCurrentView(filterField);if(newFilterPos==-1){if(addToUrl){$location.search('f'+newFilterPositionInView,filterValue);}
filters.push(newFilter);applyFilters([newFilter]);}else{filters.splice(newFilterPos,1);if(addToUrl){$location.search('f'+newFilterPositionInView,null);}
applyFilters(filters);};},removeFilterBySingle:function(filterField){var currentFilter=filterTypes[filterTypePosition(filterField)];var filterKeys=Object.keys(currentFilter.Options);if(filterKeys.length!=1){return false;}
var newFilter={"type":currentFilter.FilterField,'value':filterKeys[0]};var newFilterPos=filterPosition(newFilter);if(newFilterPos>-1){var newFilterPositionInView=this.getFilterPositionInCurrentView(filterField);filters.splice(newFilterPos,1);if(addToUrl){$location.search('f'+newFilterPositionInView,null);}
applyFilters(filters);}},resetFilters:function(){filters=[filters[0]];if(addToUrl){$location.search({});}
if(hasDefaultFilter){filters.push({'type':'Default','value':'NotRelevant'});}
applyFilters(filters);},filterByTab:function(tabName){filters=[{'type':'Tab','value':tabName}];if(currentSorter.DisplayOn.indexOf(tabName)==-1){currentSorter.Applied=false;for(var i=0,length=sorters.length;i<length;i++){if(sorters[i].DisplayOn.indexOf(tabName)>-1){currentSorter=sorters[i];break;}}};if(hasDefaultFilter){filters.push({'type':'Default','value':tabName});}
applyFilters(filters);if(!hasDefaultFilter){calculateTabSizes();}},tabExists:function(tabName){return tabPosition(tabName)>-1;},displaySorterInCurrentTab:function(index){return sorters[index].DisplayOn.indexOf(this.getTabName())>-1;},sortBy:function(index){if(sorters[index].Disabled){return;}
if(sorters[index].DisplayName==currentSorter.DisplayName){currentSorter.IsAscending=!currentSorter.IsAscending;applySort(filteredData);}else{currentSorter.Applied=false;currentSorter=sorters[index];applySort(filteredData);}},isSorterIdApplied:function(id){return sorters[id].Applied;},getProperty:function(field){return auxData[field]||false;},setProperty:function(field,value){auxData[field]=value;},increaseViewSizeOnScorll:function(){currentViewSize=currentViewSize+viewStepSize;if(currentViewSize>filteredData.length){currentViewSize=filteredData.length;}},loadMoreOnScroll:function(){this.increaseViewSizeOnScorll();},getToplistData:function(symbol){var paramsForCall={};paramsForCall['params']={};paramsForCall['params']['symbol']=symbol;paramsForCall['params']['limit']="ALL";return $http.get("/api/data/toplistvolumesnapshot/",paramsForCall)},getICOListData:function(commaSeparatedSymbols,toCurrency){var params={};params['params']={};params['params']['fsyms']=commaSeparatedSymbols;params['params']['tsym']=toCurrency;return $http.get("https://min-api.cryptocompare.com/data/subsWatchlist",params)}}}]);angular.module('ccc-app').factory('listsBehaviourWithAPI',['$location',function listsBehaviourWithAPIFactory($location){var filterTypes=[];var allData=[];var currentFiltersApplied=[];var auxData={};return{setInitData:function(initialData){allData=initialData.Data;},appendData:function(newData){allData=allData.concat(newData);},resetAllData:function(){allData=[];},getAllData:function(){return allData;},setFilterTypes:function(filterTypesArray){filterTypes=filterTypesArray;for(var i=0,l=filterTypes.length;i<l;i++){currentFiltersApplied=currentFiltersApplied.concat(filterTypes[i].Default);}},getCSVFilters:function(){return currentFiltersApplied.join(',');},getFilterTypes:function(displayType){if(displayType=="ALL"){return filterTypes;}
var filtersToReturn=[];for(var i=0,l=filterTypes.length;i<l;i++){if(filterTypes[i]['DisplayType']==displayType){filtersToReturn.push(filterTypes[i]);}}
return filtersToReturn;},isApplied:function(filterKey){return currentFiltersApplied.indexOf(filterKey)>-1;},filterBy:function(filterKey){var filterIndex=currentFiltersApplied.indexOf(filterKey);if(filterIndex==-1){currentFiltersApplied.push(filterKey);}else{currentFiltersApplied.splice(filterIndex,1);}
this.reloadData();},getLastDataPointTs:function(){if(allData.length>0){return allData[allData.length-1]["Timestamp"];}
return-1;},getProperty:function(field){return auxData[field]||false;},setProperty:function(field,value){auxData[field]=value;},loadMoreOnScroll:function(reset){alert("loadMoreOnScroll needs to be implemented on the controller");},reloadData:function(){alert("reloadData needs to be implemented on the controller");},loadDataFromAPI:function(reset){alert("loadDataFromAPI needs to be implemented on the controller");}}}]);;;;angular.module('ccc-app').controller('PortfolioContainerCtrl',['$rootScope','$scope','$timeout','userManager','pageInfo','portfolioManager','portfolioModalService','cModalService','toastNotifications','streamerUtilities',function($rootScope,$scope,$timeout,userManager,pageInfo,portfolioManager,portfolioModalService,cModalService,toastNotifications,streamerUtilities){$scope.updatingPortfolioCurrency=false;$scope.activePortfolio={AllSubs:[]};$scope.selectedIndex=0;$scope.userManager=userManager;$scope.currentPortfolioSubs=[];$scope.prevPortfolioSubs=[];$scope.portfolioModalService=portfolioModalService;$scope.portfolioManager=portfolioManager;$scope.currentTab={};$scope.showLogin=function(){cModalService.showLoginModal();};$scope.openDescription=function(){portfolioModalService.showPopup('Portfolio Description',$scope.activePortfolio.Description);};$scope.showActivationReminder=function(){cModalService.showActivationReminderModal();};$scope.changeCurrency=function(){$scope.updatingPortfolioCurrency=true;portfolioManager.update($scope.activePortfolio).success(function(apiResponse){switch(apiResponse.Type){case 100:$rootScope.$emit("PortfolioReload",$scope.activePortfolio.Currency);toastNotifications.addNotification('success','Your portfolio currency been successfully updated to '+$scope.activePortfolio.Currency+'!');break;case 101:toastNotifications.addNotification('warning','There was nothing to update!');break;case 1:cModalService.showLoginModal("Please login or signup and you'll be able to update your portfolio.");break;case 5:cModalService.showActivationReminderModal();break;default:toastNotifications.addNotification('error',apiResponse.Message);break;}
$scope.updatingPortfolioCurrency=false;});};$scope.loginChange=$rootScope.$on("LoginValueChange",function(event,newValue){if(newValue==true&&$scope.isPublic!='yes'){$scope.loadingPortfolioData=true;portfolioManager.loadPortfolioDataFromApi().success(function(data){portfolioManager.setPortfolioData(data);$scope.loadingPortfolioData=false;});}});$scope.addPortfolioMemberDialog=function(){var objToSend={};objToSend.NeedsPortfolioSelection=false;objToSend.PortfolioId=$scope.activePortfolio.Id;objToSend.BuyCurrency=$scope.activePortfolio.Currency;objToSend.BuyPriceType="per_unit";objToSend.ShowAdvanced=false;objToSend.WalletName="";objToSend.ExchangeName="";objToSend.BoughtOn=new Date();objToSend.BoughtOn.setHours(0,0,0,0);objToSend.SoldOn=objToSend.BoughtOn;objToSend.Action='Add';portfolioModalService.showCoinDialog(objToSend);};$scope.addPortfolioDialog=function(){var objToSend={};objToSend.Action='Add';objToSend.Currency='USD';objToSend.Access="Private";objToSend.Encryption="Off";portfolioModalService.showPortfolioDialog(objToSend);};$scope.editPortfolioDialog=function(){var objToSend={};objToSend.Action='Edit';objToSend.Id=$scope.activePortfolio.Id;objToSend.Access=$scope.activePortfolio.Access;objToSend.Encryption=$scope.activePortfolio.Encryption;objToSend.Name=$scope.activePortfolio.Name;objToSend.Currency=$scope.activePortfolio.Currency;objToSend.Description=$scope.activePortfolio.Description;portfolioModalService.showPortfolioDialog(objToSend);};$scope.coinStatusChangeOnPortfolio=$rootScope.$on('CoinStatusChangeOnPortfolio',function(event,eventType){$scope.prevPortfolioSubs=$scope.activePortfolio.AllSubs.slice();$scope.activePortfolio.AllSubs=portfolioManager.generatePortfolioSubsArray($scope.activePortfolio);streamerUtilities.addGlobalPageSubs($scope.activePortfolio.AllSubs,function(messageInfo){$scope.parseMessage(messageInfo);});streamerUtilities.removeGlobalPageSubs($scope.prevPortfolioSubs);portfolioManager.generatePortfolioStats($scope.activePortfolio);});$scope.generateSameFromAndToResponse=function(symbol){return"5~CCCAGG~"+symbol+"~"+symbol+"~0~1~1~1~0~1~0~0~0~0~0~0~0~1~1~1~1~1~1~N/A~7ffff";};$scope.portfolioReload=$rootScope.$on('PortfolioReload',function(event,portfolioCurrency){$scope.prevPortfolioSubs=$scope.activePortfolio.AllSubs.slice();$scope.activePortfolio.IsReloadingData=true;$scope.activePortfolio.IsReloadingSoldData=true;$scope.activePortfolio.Currency=portfolioCurrency;var coinsNeeded=portfolioManager.generatePairsToLoad($scope.activePortfolio);if(coinsNeeded.length>0){portfolioManager.loadCurrentPortfolioSubs(coinsNeeded).success(function(responseSubsList){portfolioManager.decorateAllPortfolioMembers($scope.activePortfolio);portfolioManager.populateSubscriptionData($scope.activePortfolio,responseSubsList);$scope.activePortfolio.AllSubs=portfolioManager.generatePortfolioSubsArray($scope.activePortfolio);portfolioManager.decoratePortfolioStats($scope.activePortfolio);portfolioManager.emitStreamerData(responseSubsList);streamerUtilities.addGlobalPageSubs($scope.activePortfolio.AllSubs,function(messageInfo){$scope.parseMessage(messageInfo);});streamerUtilities.removeGlobalPageSubs($scope.prevPortfolioSubs);portfolioManager.generatePortfolioStats($scope.activePortfolio);portfolioManager.sortPortfolioMembers($scope.activePortfolio,'Current',true);$scope.activePortfolio.IsReloadingData=false;var pairsWithTimestamp=portfolioManager.generatePairsWithTimestampToLoad($scope.activePortfolio);if(pairsWithTimestamp.length>0){portfolioManager.loadPairsWithTimestampData(0,pairsWithTimestamp,$scope.activePortfolio,false,function(){portfolioManager.generatePortfolioStats($scope.activePortfolio);});}});}else{portfolioManager.decorateAllPortfolioMembers($scope.activePortfolio);portfolioManager.sortPortfolioMembers($scope.activePortfolio,'Current',true);portfolioManager.decoratePortfolioStats($scope.activePortfolio);$scope.activePortfolio.IsReloadingData=false;var pairsWithTimestamp=portfolioManager.generatePairsWithTimestampToLoad($scope.activePortfolio);if(pairsWithTimestamp.length>0){portfolioManager.loadPairsWithTimestampData(0,pairsWithTimestamp,$scope.activePortfolio,false,function(){portfolioManager.generatePortfolioStats($scope.activePortfolio);});}}});$scope.generateStatsAndAddSubsToStreamer=function(currentPortfolio){$scope.activePortfolio=currentPortfolio;$scope.activePortfolio.AllSubs=portfolioManager.generatePortfolioSubsArray(currentPortfolio);streamerUtilities.addGlobalPageSubs($scope.activePortfolio.AllSubs,function(messageInfo){$scope.parseMessage(messageInfo);});streamerUtilities.removeGlobalPageSubs($scope.prevPortfolioSubs);portfolioManager.generatePortfolioStats(currentPortfolio);$scope.activePortfolio.IsReloadingData=false;};$scope.removeSubsFromStreamer=function(currentPortfolio){$scope.prevPortfolioSubs=currentPortfolio.AllSubs;};$scope.parseMessage=function(messageInfo){var subKey=messageInfo.SubKey;var subWasRelevant=false;if($scope.activePortfolio.AllSubs.indexOf(subKey)>-1&&subKey!=messageInfo.Raw){var messageObject=messageInfo.Obj;for(var i=0,length=$scope.activePortfolio.Members.length;i<length;i++){var currentMember=$scope.activePortfolio.Members[i];if(currentMember.SubInfo.SubsNeeded.length>0){switch(currentMember.SubInfo.Conversion){case"direct":if(currentMember.SubInfo.SubsNeeded[0]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'Current',$scope.activePortfolio.Currency,currentMember.SubInfo.Conversion)
currentMember.DataUpdated=true;}
break;case"invert":if(currentMember.SubInfo.SubsNeeded[0]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'Current',$scope.activePortfolio.Currency,currentMember.SubInfo.Conversion);currentMember.DataUpdated=true;}
break;case"multiply":case"divide":case"invert_muliply":case"invert_divide":if(currentMember.SubInfo.SubsNeeded[0]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'SubOne',$scope.activePortfolio.Currency,currentMember.SubInfo.Conversion);currentMember.DataUpdated=true;}
if(currentMember.SubInfo.SubsNeeded[1]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'Conversion',$scope.activePortfolio.Currency,currentMember.SubInfo.Conversion);currentMember.DataUpdated=true;}
break;}}
if(currentMember.SubInfoBuy.SubsNeeded.length>0){switch(currentMember.SubInfoBuy.Conversion){case"direct":if(currentMember.SubInfoBuy.SubsNeeded[0]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'CurrentBuy',$scope.activePortfolio.Currency,currentMember.SubInfoBuy.Conversion)
currentMember.DataUpdated=true;}
break;case"invert":if(currentMember.SubInfoBuy.SubsNeeded[0]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'CurrentBuy',$scope.activePortfolio.Currency,currentMember.SubInfoBuy.Conversion);currentMember.DataUpdated=true;}
break;case"multiply":case"divide":case"invert_muliply":case"invert_divide":if(currentMember.SubInfoBuy.SubsNeeded[0]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'ConversionBuySubOne',$scope.activePortfolio.Currency,currentMember.SubInfoBuy.Conversion);currentMember.DataUpdated=true;}
if(currentMember.SubInfoBuy.SubsNeeded[1]==subKey){currentMember=streamerUtilities.decorateCurrentPorfolioMember(currentMember,messageInfo,'ConversionBuy',$scope.activePortfolio.Currency,currentMember.SubInfoBuy.Conversion);currentMember.DataUpdated=true;}
break;}}else{if(currentMember.DataUpdated==true){currentMember.PriceInfo.PortfolioValues.RAW.BuyConversionPrice=currentMember.PriceInfo.PortfolioValues.RAW.Price;currentMember.PriceInfo.PortfolioValues.DISPLAY.BuyConversionPrice=currentMember.PriceInfo.PortfolioValues.DISPLAY.Price;}}
if(currentMember.DataUpdated==true){subWasRelevant=true;currentMember.timeout=$timeout(function(id){$scope.handleTimeout(id);},1500,false,currentMember.Id);}}
if(subWasRelevant){portfolioManager.generatePortfolioStats($scope.activePortfolio);portfolioManager.sortPortfolioMembers($scope.activePortfolio,'Current',false);$scope.needsUpdate=true;}}}
$scope.currentAggMessage=$rootScope.$on('CurrentAggMessage',function(event,messageInfo){$scope.parseMessage(messageInfo);});$scope.handleTimeout=function(memberId){var dateNow=new Date();var activePortfolioVisual=$scope.activePortfolio.Stats.Visual;for(var property in activePortfolioVisual){if(activePortfolioVisual[property]!=false&&dateNow>=activePortfolioVisual[property]){activePortfolioVisual[property]=false;}}
for(var i=0,length=$scope.activePortfolio.Members.length;i<length;i++){if($scope.activePortfolio.Members[i].Id==memberId){var currentMember=$scope.activePortfolio.Members[i];var visualLocal=currentMember['PriceInfo']['Visual'];for(var property in visualLocal){if(visualLocal[property]!=false&&dateNow>=visualLocal[property]){visualLocal[property]=false;}}
return;}}};$scope.portfoliosFullyLoaded=$rootScope.$on('PortfoliosFullyLoaded',function(event,messageInfo){if($scope.isPublic=="yes"){$scope.generateStatsAndAddSubsToStreamer(portfolioManager.getPublicPortfolio());pageInfo.setSEOTitle($scope.activePortfolio.Owner.Name+' - '+$scope.activePortfolio.Name+' ('+$scope.activePortfolio.Currency+' Crypto Portfolio)');if($scope.activePortfolio.Description!=""){pageInfo.setSEODescription($scope.activePortfolio.Description);}else{var coinHolding=[];for(var iMembers=0;iMembers<$scope.activePortfolio.Members.length;iMembers++){var name=$scope.activePortfolio.Members[iMembers].Coin.Name;if(coinHolding.indexOf(name)===-1){coinHolding.push(name);}}
pageInfo.setSEODescription('Cryptocurrency portfolio tracking '+coinHolding.join(','));}}});$scope.changeToStatsTab=$rootScope.$on("ChangeStatsTab",function(event,portfolioId,tabName){$scope.currentTab[portfolioId]=tabName;});}]);angular.module('ccc-app').controller('PortfolioStatsCtrl',['$rootScope','$scope','toastNotifications','portfolioManager','portfolioModalService','cModalService',function($rootScope,$scope,toastNotifications,portfolioManager,portfolioModalService,cModalService){$scope.currentStatsTab='Overview';$rootScope.$emit("ChangeStatsTab",$scope.currentPortfolio.Id,$scope.currentStatsTab);$scope.portfolioManager=portfolioManager;$scope.showTab=function(tabName){$scope.currentStatsTab=tabName;$rootScope.$emit("ChangeStatsTab",$scope.currentPortfolio.Id,tabName);};$scope.changeToAdvancedChartTab=$rootScope.$on("AdvancedChart",function(event,portfolioId){if($scope.currentPortfolio.Id==portfolioId){$scope.currentStatsTab="AdvancedChart";}});$scope.guides={overview:{name:"Portfolio FAQ",url:"/portfolio/guides/cryptocompare-portfolio-faq/"},advancedChart:{name:"How to use the Portfolio Advanced Charts",url:"/portfolio/guides/how-to-use-the-portfolio-advanced-charts/"},riskAnalysis:{name:"How to use the CryptoCompare Portfolio Risk Analysis tab",url:"/portfolio/guides/how-to-use-the-cryptocompare-portfolio-risk-analysis-tab/"},accounting:{name:"How to use the Accounting tool",url:"/portfolio/guides/cryptocompare-portfolio-faq/"}}}]);angular.module('ccc-app').controller('PortfolioCoinsCtrl',['$scope','portfolioManager','portfolioModalService','cModalService','dateParsing',function($scope,portfolioManager,portfolioModalService,cModalService,dateParsing){$scope.ordering=portfolioManager.getOrdering();$scope.dateParsing=dateParsing;$scope.currentCoinsTab='Current';$scope.addPortfolioMemberDialog=function(){var objToSend={};objToSend.ShowBasicInfo=true;objToSend.NeedsPortfolioSelection=false;objToSend.PortfolioId=$scope.currentPortfolio.Id;objToSend.BuyCurrency=$scope.currentPortfolio.Currency;objToSend.BuyPriceType="per_unit";objToSend.ShowAdvanced=false;objToSend.WalletName="";objToSend.ExchangeName="";objToSend.BoughtOn=new Date();objToSend.BoughtOn.setHours(0,0,0,0);objToSend.SoldOn=objToSend.BoughtOn;objToSend.Sold=false;objToSend.Action='Add';portfolioModalService.showCoinDialog(objToSend);};$scope.getSoldMembers=function(){if(!$scope.currentPortfolio.IsCollapsed){return $scope.currentPortfolio.SoldMembers;}
return $scope.currentPortfolio.SoldMembersCollapsed;}
$scope.getCurrentMembers=function(){if(!$scope.currentPortfolio.IsCollapsed){return $scope.currentPortfolio.Members;}
return $scope.currentPortfolio.MembersCollapsed;}
$scope.toggleCollapsed=function(){if($scope.currentPortfolio.IsCollapsed==false){portfolioManager.generateCollapsedPortfolioStats($scope.currentPortfolio);$scope.currentPortfolio.IsCollapsed=true;portfolioManager.sortPortfolioMembers($scope.currentPortfolio,$scope.currentCoinsTab,true);}else{$scope.currentPortfolio.IsCollapsed=false;portfolioManager.sortPortfolioMembers($scope.currentPortfolio,$scope.currentCoinsTab,true);}}
$scope.isPortfolioEmpty=function(type){if(type=='Current'){return $scope.currentPortfolio.Members.length==0;}
if(type=='Sold'){return $scope.currentPortfolio.SoldMembers.length==0;}
return $scope.currentPortfolio.Members.length==0;}
$scope.editPortfolioMemberDialog=function(coinInfo){var objToSend={};objToSend.ShowBasicInfo=true;objToSend.NeedsPortfolioSelection=false;objToSend.Action='Edit';objToSend.PortfolioId=coinInfo.PortfolioId;objToSend.Id=coinInfo.Id;objToSend.Coin=coinInfo.Coin;objToSend.Amount=coinInfo.Amount;objToSend.Amount=CCC.STATIC.UTIL.noExponents(coinInfo.Amount);objToSend.BuyPrice=CCC.STATIC.UTIL.noExponents(coinInfo.BuyPrice);objToSend.BuyPriceType="per_unit";objToSend.BuyCurrency=coinInfo.BuyCurrency;objToSend.ShowAdvanced=true;objToSend.StoredIn=coinInfo.StoredIn;objToSend.WalletName=coinInfo.WalletName;objToSend.Address=coinInfo.Address;objToSend.ExchangeName=coinInfo.ExchangeName;objToSend.Description=coinInfo.Description;objToSend.BoughtOn=new Date(coinInfo.BoughtOnTs*1000);objToSend.Sold=coinInfo.Sold;if(!objToSend.Sold){objToSend.SellAmount=objToSend.Amount;objToSend.SellPrice=coinInfo.PriceInfo.PortfolioValues.RAW.Price;objToSend.SellCurrency=$scope.currentPortfolio.Currency;objToSend.SellPriceType="per_unit";objToSend.SoldOn=new Date();objToSend.SoldOn.setHours(0,0,0,0);objToSend.SoldDescription=coinInfo.SoldDescription;}else{objToSend.SellAmount=coinInfo.Amount;objToSend.SellPrice=coinInfo.SellPrice;objToSend.SellCurrency=coinInfo.SellCurrency;objToSend.SellPriceType="per_unit";objToSend.SoldOn=new Date(coinInfo.SoldOnTs*1000);objToSend.SoldOn.setHours(0,0,0,0);objToSend.SoldDescription=coinInfo.SoldDescription;}
portfolioModalService.showCoinDialog(objToSend);};$scope.showCurrentCoins=function(){$scope.currentCoinsTab='Current';};$scope.showSoldCoins=function(){$scope.currentCoinsTab='Sold';};$scope.sortPortfolio=function(field,type){if($scope.ordering.sortingField==field){$scope.ordering.isAscending=!$scope.ordering.isAscending;}else{$scope.ordering.sortingField=field;}
portfolioManager.changeOrdering($scope.ordering);portfolioManager.sortPortfolioMembers($scope.currentPortfolio,type,true);};}]);angular.module('ccc-app').controller('PortfolioAddCoinModalCtrl',['$scope','$mdDialog','$q','cModalService','portfolioManager','portfolioSummary','toastNotifications','portfolioModalService','initObj',function($scope,$mdDialog,$q,cModalService,portfolioManager,portfolioSummary,toastNotifications,portfolioModalService,initObj){$scope.portfolioManager=portfolioManager;$scope.addingCoin=false;$scope.updatingCoin=false;$scope.deletingCoin=false;$scope.minDatePickerDate=new Date(2009,1,1);$scope.maxDatePickerDate=new Date();$scope.numberWithDot="/^[+-]?\d+(\.\d+)?$/";$scope.originalBuyCurrency=initObj.BuyCurrency;$scope.searchCacheWallet=initObj.WalletName;$scope.searchCacheExchange=initObj.ExchangeName;$scope.hide=function(){$mdDialog.hide();};$scope.cancel=function(){$mdDialog.cancel();};$scope.autocompleteCoinChange=function(){if($scope.newPortfolioMember.Coin==null){$scope.searchText="";return;}
if($scope.newPortfolioMember.Coin.Symbol==$scope.newPortfolioMember.BuyCurrency){$scope.newPortfolioMember.BuyCurrency="USD";}else{if($scope.newPortfolioMember.BuyCurrency!=$scope.originalBuyCurrency){$scope.newPortfolioMember.BuyCurrency=$scope.originalBuyCurrency;}}};$scope.clone=function(obj){if(null==obj||"object"!=typeof obj)return obj;var copy=obj.constructor();var keys=Object.keys(obj);for(var i=0;i<keys.length;i++){var attr=keys[i];if(obj.hasOwnProperty(attr)){var value=obj[attr];if(typeof(value.getTime)==='function'){copy[attr]=new Date(value.getTime());}else{copy[attr]=$scope.clone(value);}};}
return copy;}
$scope.newPortfolioMember=$scope.clone(initObj);$scope.searchCoin="";$scope.querySearchCoin=function(query){var deferred;deferred=$q.defer();portfolioManager.getAutosuggestCoins(query).success(function(data){deferred.resolve(data['Results'])});return deferred.promise;}
$scope.searchWallet=initObj.WalletName;$scope.querySearchWallet=function(query){var deferred;deferred=$q.defer();portfolioManager.getAutosuggestWallet(query).success(function(data){deferred.resolve(data['Results'])});return deferred.promise;}
$scope.cacheValueForWallet=function(val){$scope.searchCacheWallet=val;}
$scope.searchExchange=initObj.ExchangeName;$scope.querySearchExchange=function(query){var deferred;deferred=$q.defer();portfolioManager.getAutosuggestExchange(query).success(function(data){deferred.resolve(data['Results'])});return deferred.promise;}
$scope.cacheValueForExchange=function(val){$scope.searchCacheExchange=val;}
$scope.sellPortfolioMember=function(){$scope.sellingCoin=true;if($scope.newPortfolioMember.PortfolioId!=""&&$scope.newPortfolioMember.SellAmount!=""&&$scope.newPortfolioMember.SellPrice!=""&&$scope.newPortfolioMember.SellCurrency!=""&&$scope.newPortfolioMember.SellPriceType!=""&&$scope.newPortfolioMember.SoldOn!=""){portfolioManager.coinSell($scope.newPortfolioMember).success(function(apiResponse){switch(apiResponse.Type){case 100:if(apiResponse['Data'].ActionType=="New"){portfolioManager.updateCoin({PortfolioId:apiResponse['Data'].PortfolioId,Id:apiResponse['Data'].OldId,Amount:apiResponse['Data'].NewAmount,NeedsPortfolioReload:false},false);portfolioManager.addPortfolioMemberSell(apiResponse['Data']);}else if(apiResponse['Data'].ActionType=="Full"){portfolioManager.removePortfolioMember($scope.newPortfolioMember,false);portfolioManager.addPortfolioMemberSell(apiResponse['Data']);}
portfolioManager.generatePortfolioStats(portfolioManager.getPortfolioById($scope.newPortfolioMember.PortfolioId));toastNotifications.addNotification('success','Your portfolio member has been successfully sold!');$mdDialog.cancel();break;case 1:cModalService.showLoginModal("Please login or signup and you'll be able to sell your portfolio member.");break;case 5:cModalService.showActivationReminderModal();break;default:toastNotifications.addNotification('error',apiResponse.Message);$mdDialog.cancel();break;}
$scope.sellingCoin=false;});}}
$scope.updatePortfolioMember=function(){$scope.generateValuesForWalletAndExchnage();if(!portfolioManager.isCoinChanged($scope.newPortfolioMember)){$mdDialog.cancel();toastNotifications.addNotification('warning','There was nothing to update on your coin!');return;}
$scope.updatingCoin=true;portfolioManager.coinUpdate($scope.newPortfolioMember).success(function(apiResponse){switch(apiResponse.Type){case 100:portfolioManager.updateCoin(apiResponse['Data'],true);portfolioManager.generatePortfolioStats(portfolioManager.getPortfolioById($scope.newPortfolioMember.PortfolioId));toastNotifications.addNotification('success','Your portfolio member has been successfully updated!');$mdDialog.cancel();break;case 101:toastNotifications.addNotification('warning','There was nothing to update on your portfolio member!');$mdDialog.cancel();break;case 1:cModalService.showLoginModal("Please login or signup and you'll be able to update your portfolio member.");break;case 5:cModalService.showActivationReminderModal();break;default:toastNotifications.addNotification('error',apiResponse.Message);$mdDialog.cancel();break;}
$scope.updatingCoin=false;});}
$scope.generateValuesForWalletAndExchnage=function(){if($scope.newPortfolioMember.hasOwnProperty('Wallet')&&$scope.newPortfolioMember.Wallet!=null){$scope.newPortfolioMember.WalletName=$scope.newPortfolioMember.Wallet.Name;}else{$scope.newPortfolioMember.WalletName=$scope.searchCacheWallet;}
if($scope.newPortfolioMember.hasOwnProperty('Exchange')&&$scope.newPortfolioMember.Exchange!=null){$scope.newPortfolioMember.ExchangeName=$scope.newPortfolioMember.Exchange.Name;}else{$scope.newPortfolioMember.ExchangeName=$scope.searchCacheExchange;}
if($scope.newPortfolioMember.StoredIn=='Exchange'){$scope.newPortfolioMember.WalletName='';$scope.newPortfolioMember.Address='';}else if($scope.newPortfolioMember.StoredIn=='Wallet'){$scope.newPortfolioMember.ExchangeName='';}};$scope.sendPortfolioMemberDataToAPI=function(){$scope.generateValuesForWalletAndExchnage();portfolioManager.coinAdd($scope.newPortfolioMember).success(function(apiResponse){if(apiResponse["Response"]=="Success"){portfolioManager.addPortfolioMember(apiResponse["Data"]);portfolioSummary.addPortfolioMember(apiResponse["Data"]);toastNotifications.addNotification('success','Your new coin has been successfully added!');$mdDialog.cancel();}else{if(apiResponse.Type==1){cModalService.showLoginModal("Please login or signup and you'll be able to add a new coin.");}
if(apiResponse.Type==5){cModalService.showActivationReminderModal();};$scope.addingCoin=false;}
$scope.addingCoin=false;}).error(function(apiResponse){$scope.addingCoin=false;});};$scope.addPortfolioMember=function(){$scope.addingCoin=true;if($scope.newPortfolioMember.PortfolioId!=""&&$scope.newPortfolioMember.Coin.Id!=""&&$scope.newPortfolioMember.Amount!=""&&$scope.newPortfolioMember.BuyPrice!=""&&$scope.newPortfolioMember.BuyCurrency!=""){if($scope.newPortfolioMember.PortfolioId==-1){portfolioManager.add('1. To the moon','USD','This is where the money for the villa, plane and yacht came from.').success(function(apiResponse){if(apiResponse["Response"]=="Success"){portfolioSummary.addNewPortfolio(apiResponse["Data"]);toastNotifications.addNotification('success','A new portfolio has been created!');$scope.newPortfolioMember.PortfolioId=apiResponse["Data"].Id;$scope.sendPortfolioMemberDataToAPI();}else{if(apiResponse.Type==1){cModalService.showLoginModal("Please login or signup and you'll be able to create a new portfolio.");}
if(apiResponse.Type==5){cModalService.showActivationReminderModal();};}});}else{$scope.sendPortfolioMemberDataToAPI();}}else{$scope.addingCoin=false;}};$scope.deletePortfolioMember=function(){$scope.deletingCoin=true;if($scope.newPortfolioMember.Id!=""){var confirm=$mdDialog.confirm().title('Are you sure you want to remove "'+$scope.newPortfolioMember.Coin.Name+'" from your portfolio?').textContent('Your coin Id is '+$scope.newPortfolioMember.Id+' write it down in case you ever want to restore it.').ariaLabel('Confirm Delete').ok('Yes, remove coin').cancel('No, I\'ll keep it.');$mdDialog.show(confirm).then(function(){portfolioManager.coinDelete($scope.newPortfolioMember.Id).success(function(apiResponse){if(apiResponse["Response"]=="Success"){portfolioManager.removePortfolioMember($scope.newPortfolioMember,true);toastNotifications.addNotification('success','Your coin has been successfully removed!');$mdDialog.cancel();}else{if(apiResponse.Type==1){cModalService.showLoginModal("Please login or signup and you'll be able to delete coins in your portfolio.");}
if(apiResponse.Type==5){cModalService.showActivationReminderModal();};}
$scope.deletingCoin=false;});},function(){$scope.deletingCoin=false;portfolioModalService.showCoinDialog($scope.newPortfolioMember);});}else{$scope.deletingCoin=false;}}}]);angular.module('ccc-app').controller('PortfolioAddModalCtrl',['$scope','$mdDialog','cModalService','portfolioManager','portfolioSummary','portfolioModalService','toastNotifications','initObj',function($scope,$mdDialog,cModalService,portfolioManager,portfolioSummary,portfolioModalService,toastNotifications,initObj){$scope.portfolioManager=portfolioManager;$scope.addingPortfolio=false;$scope.deletingPortfolio=false;$scope.updatingPortfolio=false;$scope.newPortfolio=initObj;$scope.cancel=function(){$mdDialog.cancel();};$scope.addPortfolio=function($event){$scope.addingPortfolio=true;if($scope.newPortfolio.Name!=""){portfolioManager.add($scope.newPortfolio.Name,$scope.newPortfolio.Currency,$scope.newPortfolio.Description,$scope.newPortfolio.Access,$scope.newPortfolio.Encryption).success(function(apiResponse){if(apiResponse["Response"]=="Success"){portfolioManager.addNewPortfolio(apiResponse["Data"]);toastNotifications.addNotification('success','Your portfolio has been successfully created!');$mdDialog.cancel();}else{if(apiResponse.Type==1){cModalService.showLoginModal("Please login or signup and you'll be able to create a new portfolio.");}
if(apiResponse.Type==5){cModalService.showActivationReminderModal();};}
$scope.addingPortfolio=false;});}else{$scope.addingPortfolio=false;}};$scope.updatePortfolio=function(){if(!portfolioManager.isPortfolioChanged($scope.newPortfolio)){$mdDialog.cancel();toastNotifications.addNotification('warning','There was nothing to update on your portfolio!');return;}
$scope.updatingPortfolio=true;if($scope.newPortfolio.Id!=""){portfolioManager.update($scope.newPortfolio).success(function(apiResponse){switch(apiResponse.Type){case 100:portfolioManager.updatePortfolio(apiResponse['Data']);toastNotifications.addNotification('success','Your portfolio has been successfully updated!');$mdDialog.cancel();break;case 101:toastNotifications.addNotification('warning','There was nothing to update on your portfolio!');$mdDialog.cancel();break;case 1:cModalService.showLoginModal("Please login or signup and you'll be able to update your portfolio.");break;case 5:cModalService.showActivationReminderModal();break;default:toastNotifications.addNotification('error',apiResponse.Message);$mdDialog.cancel();break;}
$scope.updatingPortfolio=false;});}}
$scope.deletePortfolio=function(){$scope.deletingPortfolio=true;if($scope.newPortfolio.Id!=""){var confirm=$mdDialog.confirm().title('Are you sure you want to delete "'+$scope.newPortfolio.Name+'" portfolio?').textContent('Your portfolio ID is '+$scope.newPortfolio.Id+' write it down in case you ever want to restore it.').ariaLabel('Confirm Delete').ok('Yes, delete portfolio').cancel('No, I\'ll keep it.');$mdDialog.show(confirm).then(function(){portfolioManager.delete($scope.newPortfolio.Id).success(function(apiResponse){if(apiResponse["Response"]=="Success"){portfolioManager.removePortfolio($scope.newPortfolio.Id);toastNotifications.addNotification('success','Your portfolio has been successfully deleted!');$mdDialog.cancel();}else{if(apiResponse.Type==1){cModalService.showLoginModal("Please login or signup and you'll be able to delete your portfolio.");}
if(apiResponse.Type==5){cModalService.showActivationReminderModal();};}
$scope.deletingPortfolio=false;});},function(){$scope.deletingPortfolio=false;portfolioModalService.showPortfolioDialog($scope.newPortfolio);});}else{$scope.deletingPortfolio=false;}};}]);angular.module('ccc-app').controller('PortfolioAccountingCtrl',['$rootScope','$scope','$http','$filter','pageInfo','portfolioManager','chartUtil','cModalService','userManager','dateParsing','portfolioAccountingData',function($rootScope,$scope,$http,$filter,pageInfo,portfolioManager,chartUtil,cModalService,userManager,dateParsing,portfolioAccountingData){$scope.dateParsing=dateParsing;$scope.allData=portfolioAccountingData;$scope.transactionList=[];$scope.summaryStats={};$scope.guide={name:"How to use the Portfolio Accounting Tool",url:"/portfolio/guides/how-to-use-the-portfolio-accounting-tool/"};$scope.taxDetails={taxExempt:0,taxRate:12,taxAmountRaw:0,taxAmountDisplay:0};$scope.calculateTax=function(){$scope.taxDetails.taxAmountRaw=Math.max($scope.summaryStats.RAW.realizedPL-$scope.taxDetails.taxExempt,0)*$scope.taxDetails.taxRate/100;$scope.taxDetails.taxAmountDisplay=chartUtil.convertValueToDisplay($scope.currencySymbol,$scope.taxDetails.taxAmountRaw);}
$scope.currentTab='All';$scope.calculateStats=function(){var summaryStats={};summaryStats.RAW={period:"",totalInvestment:0,totalInvestmentSold:0,totalRevenue:0,realizedPL:0,unrealizedPL:0,netCashFlow:0};var start=Math.floor($scope.allData.Start.getTime()/1000);var end=Math.floor($scope.allData.End.getTime()/1000);var transactions=$scope.allData.getFiltered();if($scope.currentTab=='All'){for(var i=0;i<transactions.length;++i){var details=transactions[i];if(details.investmentDateRaw>=start&&details.investmentDateRaw<=end){summaryStats.RAW.totalInvestment+=details.investmentRaw;}
if(details.position==="Open"){summaryStats.RAW.unrealizedPL+=details.profitLossRaw;}else{if(details.dateRaw>=start&&details.dateRaw<=end){summaryStats.RAW.totalInvestmentSold+=details.investmentRaw;summaryStats.RAW.totalRevenue+=details.revenueRaw;summaryStats.RAW.realizedPL+=details.profitLossRaw;}}}}else if($scope.currentTab=='History'){for(var i=0;i<transactions.length;++i){var details=transactions[i];if(details.dateRaw>=start&&details.dateRaw<=end){if(details.type=='Buy'){summaryStats.RAW.totalInvestment+=-details.valueRaw;}else{summaryStats.RAW.totalRevenue+=details.valueRaw;summaryStats.RAW.totalInvestmentSold+=details.investmentRaw;summaryStats.RAW.realizedPL+=details.profitLossRaw;}}}}
summaryStats.RAW.netCashFlow=summaryStats.RAW.totalRevenue-summaryStats.RAW.totalInvestment;summaryStats.DISPLAY={};summaryStats.DISPLAY.totalInvestment=chartUtil.convertValueToDisplayLong($scope.currencySymbol,summaryStats.RAW.totalInvestment);summaryStats.DISPLAY.totalInvestmentSold=chartUtil.convertValueToDisplayLong($scope.currencySymbol,summaryStats.RAW.totalInvestmentSold);summaryStats.DISPLAY.totalRevenue=chartUtil.convertValueToDisplayLong($scope.currencySymbol,summaryStats.RAW.totalRevenue);summaryStats.DISPLAY.realizedPL=chartUtil.convertValueToDisplayLong($scope.currencySymbol,summaryStats.RAW.realizedPL);summaryStats.DISPLAY.unrealizedPL=chartUtil.convertValueToDisplayLong($scope.currencySymbol,summaryStats.RAW.unrealizedPL);summaryStats.DISPLAY.netCashFlow=chartUtil.convertValueToDisplayLong($scope.currencySymbol,summaryStats.RAW.netCashFlow);$scope.summaryStats=summaryStats;$scope.calculateTax();return summaryStats;};$scope.generateTransactionHistory=function(){$scope.transactionHistory=[];var start=0;var currentMembers=$scope.currentPortfolio.Members;$scope.currencySymbol=$scope.currentPortfolio.CurrencyDisplay;$scope.currency=$scope.currentPortfolio.Currency;for(var i=0;i<currentMembers.length;++i){var currentMember=currentMembers[i];var coinSymbol=chartUtil.getSymbolFromCurrencyCode(currentMember.Coin.Symbol);if(i==0){start=currentMember.BoughtOnTs;}else{start=Math.min(currentMember.BoughtOnTs,start);}
var details={coinName:currentMember.Coin.Name,coinSymbol:currentMember.Coin.Symbol,currency:currentMember.BuyCurrency,buyCurrency:currentMember.BuyCurrency,sellCurrency:'None',type:'Buy',valueRaw:-currentMember.PriceInfo.PortfolioValues.RAW.TotalInvestment,valueDisplay:chartUtil.convertValueToDisplayLong($scope.currencySymbol,-currentMember.PriceInfo.PortfolioValues.RAW.TotalInvestment),dateRaw:currentMember.BoughtOnTs,dateDisplay:dateParsing.formatMediumDateNoTime(currentMember.BoughtOnTs*1000),BaseUrl:currentMember.Coin.BaseUrl,ImageUrl:currentMember.Coin.ImageUrl,amount:currentMember.Amount,amountDisplay:chartUtil.convertValueToDisplayLong(coinSymbol,currentMember.Amount),priceConvertedDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.BuyPriceConverted,}
if(currentMember.BuyCurrency!=$scope.currency){var symbol=chartUtil.getSymbolFromCurrencyCode(currentMember.BuyCurrency);details.priceRaw=currentMember.BuyPrice;details.priceDisplay=currentMember.DisplayBuyPrice;var value=-details.amount*details.priceRaw;details.valueOriginalDisplay=chartUtil.convertValueToDisplayLong(symbol,value);}
$scope.transactionHistory.push(details);}
var currentSoldMembers=$scope.currentPortfolio.SoldMembers;for(var i=0;i<currentSoldMembers.length;++i){var currentMember=currentSoldMembers[i];if(start==0){start=currentMember.BoughtOnTs;}else{start=Math.min(currentMember.BoughtOnTs,start);}
var coinSymbol=chartUtil.getSymbolFromCurrencyCode(currentMember.Coin.Symbol);var details={coinName:currentMember.Coin.Name,coinSymbol:currentMember.Coin.Symbol,currency:currentMember.BuyCurrency,buyCurrency:currentMember.BuyCurrency,sellCurrency:'None',type:'Buy',valueRaw:-currentMember.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue,valueDisplay:chartUtil.convertValueToDisplayLong($scope.currencySymbol,-currentMember.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue),dateRaw:currentMember.BoughtOnTs,dateDisplay:dateParsing.formatMediumDateNoTime(currentMember.BoughtOnTs*1000),BaseUrl:currentMember.Coin.BaseUrl,ImageUrl:currentMember.Coin.ImageUrl,amount:currentMember.Amount,amountDisplay:chartUtil.convertValueToDisplayLong(coinSymbol,currentMember.Amount),priceConvertedDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.BuyPriceConverted,}
if(currentMember.BuyCurrency!=$scope.currency){var symbol=chartUtil.getSymbolFromCurrencyCode(currentMember.BuyCurrency);details.priceRaw=currentMember.BuyPrice;details.priceDisplay=currentMember.DisplayBuyPrice;var value=-details.amount*details.priceRaw;details.valueOriginalDisplay=chartUtil.convertValueToDisplayLong(symbol,value);}
$scope.transactionHistory.push(details);var detailsSold={coinName:currentMember.Coin.Name,coinSymbol:currentMember.Coin.Symbol,currency:currentMember.SellCurrency,buyCurrency:'None',sellCurrency:currentMember.SellCurrency,type:'Sell',valueRaw:currentMember.PriceInfo.PortfolioValues.RAW.Total,valueDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.Total,dateRaw:currentMember.SoldOnTs,dateDisplay:dateParsing.formatMediumDateNoTime(currentMember.SoldOnTs*1000),BaseUrl:currentMember.Coin.BaseUrl,ImageUrl:currentMember.Coin.ImageUrl,amount:currentMember.Amount,amountDisplay:chartUtil.convertValueToDisplayLong(coinSymbol,currentMember.Amount),priceConvertedDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.Price,investmentRaw:currentMember.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue,investmentDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.TotalCurrentBuyValue,profitLossRaw:currentMember.PriceInfo.PortfolioValues.RAW.Profit,profitLossDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.Profit,}
if(currentMember.SellCurrency!=$scope.currency){var symbol=chartUtil.getSymbolFromCurrencyCode(currentMember.SellCurrency);detailsSold.priceRaw=currentMember.SellPrice;detailsSold.priceDisplay=currentMember.DisplaySellPrice;detailsSold.valueOriginalDisplay=chartUtil.convertValueToDisplayLong(symbol,detailsSold.amount*detailsSold.priceRaw);}
$scope.transactionHistory.push(detailsSold);}
var initData={Data:$scope.transactionHistory};$scope.allData.setInitData(initData);$scope.allData.FullStart=new Date(start*1000);$scope.allData.FullStart.setHours(0,0,0);$scope.allData.FullEnd=new Date();$scope.allData.Start=$scope.allData.FullStart;$scope.allData.End=$scope.allData.FullEnd;};$scope.generateTransactionList=function(){$scope.transactionList=[];var start=0;var currentMembers=$scope.currentPortfolio.Members;$scope.currencySymbol=$scope.currentPortfolio.CurrencyDisplay;for(var i=0;i<currentMembers.length;++i){var currentMember=currentMembers[i];if(i==0){start=currentMember.BoughtOnTs;}else{start=Math.min(currentMember.BoughtOnTs,start);}
var details={coinName:currentMember.Coin.Name,coinSymbol:currentMember.Coin.Symbol,buyCurrency:currentMember.BuyCurrency,sellCurrency:"None",position:"Open",investmentRaw:currentMember.PriceInfo.PortfolioValues.RAW.TotalInvestment,investmentDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.TotalInvestment,investmentDateRaw:currentMember.BoughtOnTs,investmentDateDisplay:dateParsing.formatMediumDateNoTime(currentMember.BoughtOnTs*1000),revenueRaw:0,revenueDisplay:"-",dateRaw:Math.floor(Date.now()/1000),dateDisplay:"-",profitLossRaw:currentMember.PriceInfo.PortfolioValues.RAW.Profit,profitLossDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.Profit,BaseUrl:currentMember.Coin.BaseUrl,ImageUrl:currentMember.Coin.ImageUrl}
details.roiRaw=details.profitLossRaw/details.investmentRaw*100;details.roiDisplay=chartUtil.convertValueToDisplay("",details.roiRaw)+"%";var duration=(details.dateRaw-details.investmentDateRaw)/(60*60*24*365);details.rrrRaw=Math.log(currentMember.PriceInfo.PortfolioValues.RAW.Total/details.investmentRaw)/duration*100;details.rrrDisplay=chartUtil.convertValueToDisplay("",details.rrrRaw)+"%";$scope.transactionList.push(details);}
var currentSoldMembers=$scope.currentPortfolio.SoldMembers;for(var i=0;i<currentSoldMembers.length;++i){var currentMember=currentSoldMembers[i];if(start==0){start=currentMember.BoughtOnTs;}else{start=Math.min(currentMember.BoughtOnTs,start);}
var details={coinName:currentMember.Coin.Name,coinSymbol:currentMember.Coin.Symbol,buyCurrency:currentMember.BuyCurrency,sellCurrency:currentMember.SellCurrency,position:"Closed",investmentRaw:currentMember.PriceInfo.PortfolioValues.RAW.TotalCurrentBuyValue,investmentDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.TotalCurrentBuyValue,investmentDateRaw:currentMember.BoughtOnTs,investmentDateDisplay:dateParsing.formatMediumDateNoTime(currentMember.BoughtOnTs*1000),roiRaw:currentMember.PriceInfo.PortfolioValues.RAW.PctProfitBuyValue,roiDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.PctProfitBuyValue,dateRaw:currentMember.SoldOnTs,dateDisplay:dateParsing.formatMediumDateNoTime(currentMember.SoldOnTs*1000),profitLossRaw:currentMember.PriceInfo.PortfolioValues.RAW.Profit,profitLossDisplay:currentMember.PriceInfo.PortfolioValues.DISPLAY.Profit,BaseUrl:currentMember.Coin.BaseUrl,ImageUrl:currentMember.Coin.ImageUrl}
details.revenueRaw=details.investmentRaw+details.profitLossRaw;details.revenueDisplay=chartUtil.convertValueToDisplay($scope.currencySymbol,details.revenueRaw);var duration=(details.dateRaw-details.investmentDateRaw)/(60*60*24*365);details.rrrRaw=Math.log(currentMember.PriceInfo.PortfolioValues.RAW.Total/details.investmentRaw)/duration*100;details.rrrDisplay=chartUtil.convertValueToDisplay("",details.rrrRaw)+"%";$scope.transactionList.push(details);}
$scope.calculateStats();var initData={Data:$scope.transactionList};$scope.allData.setInitData(initData);$scope.allData.FullStart=new Date(start*1000);$scope.allData.FullStart.setHours(0,0,0);$scope.allData.FullEnd=new Date();$scope.allData.Start=$scope.allData.FullStart;$scope.allData.End=$scope.allData.FullEnd;};$scope.generateTransactionList();$scope.showAllPositions=function(){$scope.generateTransactionList();$scope.allData.resetFilters();$scope.currentTab='All';};$scope.showHistory=function(){$scope.generateTransactionHistory();$scope.allData.resetFilters();$scope.currentTab='History';}
$scope.ordering={sortingField:'coinName',isAscending:false};$scope.sortPortfolio=function(name){var sorters=$scope.allData.getSorters();var sorterIndex=0;for(var i=0;i<sorters.length;++i){if(sorters[i].PrimaryField==name){sorterIndex=i;break;}}
$scope.allData.sortBy(sorterIndex);$scope.ordering.isAscending=$scope.ordering.sortingField===name?!$scope.ordering.isAscending:false;$scope.ordering.sortingField=name;};$scope.sortPortfolio('dateRaw');$scope.info={rrr:"Real Rate of Return. Annualized return, it takes the duration of investment into account.",roi:"Return on Investment"};}]);;;;angular.module('ccc-app').factory('timelineCoinData',['listsBehaviourWithAPI','$http','$filter','dateParsing',function timelineCoinDataFactory(listsBehaviourWithAPI,$http,$filter,dateParsing){var utilStatic=CCC.STATIC.UTIL;var filterTypes=[{'DisplayName':'High Price','FilterId':'TypeHigh','Default':['HPY','HPALL'],'FiltersOptionsArray':[{'Key':'HPM','Name':'Monthly','Value':'HPM','ExtraProperty':'tsym'},{'Key':'HPY','Name':'Yearly','Value':'HPY','ExtraProperty':'tsym'},{'Key':'HPALL','Name':'All Time','Value':'HPALL','ExtraProperty':'tsym'}],'DisplayType':'Dropdown'},{'DisplayName':'Low Price','FilterId':'TypeLow','Default':['LPY','LPALL'],'FiltersOptionsArray':[{'Key':'LPM','Name':'Monthly','Value':'LPM','ExtraProperty':'tsym'},{'Key':'LPY','Name':'Yearly','Value':'LPY','ExtraProperty':'tsym'},{'Key':'LPALL','Name':'All Time','Value':'LPALL','ExtraProperty':'tsym'}],'DisplayType':'Dropdown'},{'DisplayName':'High Daily Volume','FilterId':'TypeDailyVol','Default':['HVTDY','HVTDALL'],'FiltersOptionsArray':[{'Key':'HVTDM','Name':'Monthly','Value':'HVTDM','ExtraProperty':'tsym'},{'Key':'HVFDM','Name':'Monthly','Value':'HVFDM','ExtraProperty':'fsym'},{'Key':'HVTDY','Name':'Yearly','Value':'HVTDY','ExtraProperty':'tsym'},{'Key':'HVFDY','Name':'Yearly','Value':'HVFDY','ExtraProperty':'fsym'},{'Key':'HVTDALL','Name':'All Time','Value':'HVTDALL','ExtraProperty':'tsym'},{'Key':'HVFDALL','Name':'All Time','Value':'HVFDALL','ExtraProperty':'fsym'}],'DisplayType':'Dropdown'},{'DisplayName':'High Weekly Volume','FilterId':'TypeWeeklyVol','Default':['HVTWY','HVTWALL'],'FiltersOptionsArray':[{'Key':'HVTWY','Name':'Yearly','Value':'HVTWY','ExtraProperty':'tsym'},{'Key':'HVFWY','Name':'Yearly','Value':'HVFWY','ExtraProperty':'fsym'},{'Key':'HVTWALL','Name':'All Time','Value':'HVTWALL','ExtraProperty':'tsym'},{'Key':'HVFWALL','Name':'All Time','Value':'HVFWALL','ExtraProperty':'fsym'}],'DisplayType':'Dropdown'},{'DisplayName':'High Monthly Volume','FilterId':'TypeMonthlyVol','Default':['HVTMY','HVTMALL'],'FiltersOptionsArray':[{'Key':'HVTMY','Name':'Yearly','Value':'HVTMY','ExtraProperty':'tsym'},{'Key':'HVFMY','Name':'Yearly','Value':'HVFMY','ExtraProperty':'fsym'},{'Key':'HVTMALL','Name':'All Time','Value':'HVTMALL','ExtraProperty':'tsym'},{'Key':'HVFMALL','Name':'All Time','Value':'HVFMALL','ExtraProperty':'fsym'}],'DisplayType':'Dropdown'},{'DisplayName':'Show User Generated','FilterId':'UserGenerated','Default':['USER'],'FiltersOptionsArray':[{'Key':'USER','NameTrue':'Yes','NameFalse':'No','Value':'USER','ExtraProperty':''}],'DisplayType':'Checkbox'}];listsBehaviourWithAPI.setFilterTypes(filterTypes);listsBehaviourWithAPI.appendTimelineData=function(newData,reset){for(var i=0,l=newData.length;i<l;i++){newData[i]['TimeMY']=dateParsing.formatDateMonthYear(newData[i].Timestamp*1000);newData[i]['TimeDMYNT']=dateParsing.formatLongDateNoTime(newData[i].Timestamp*1000);newData[i]['TimeMY']=dateParsing.formatDateMonthYear(newData[i].Timestamp*1000);newData[i]['TimeWS']=dateParsing.formatLongDateNoTimeWS(newData[i].Timestamp*1000);newData[i]['TimeWE']=dateParsing.formatLongDateNoTimeWE(newData[i].Timestamp*1000);newData[i]['TimeMS']=dateParsing.formatLongDateNoTimeMS(newData[i].Timestamp*1000);newData[i]['TimeME']=dateParsing.formatLongDateNoTimeME(newData[i].Timestamp*1000);newData[i]['NumShort']=utilStatic.convertValueToDisplay("",newData[i]['Number'],$filter('number'),'short');newData[i]['NumFull']=utilStatic.convertValueToDisplay("",newData[i]['Number'],$filter('number'));}
if(reset){listsBehaviourWithAPI.resetAllData();}
listsBehaviourWithAPI.appendData(newData);};listsBehaviourWithAPI.getMoreTimelineEvents=function(reset){var lastPointTS=listsBehaviourWithAPI.getLastDataPointTs();var paramsForCall={};paramsForCall['params']={};paramsForCall['params']['fsym']=listsBehaviourWithAPI.getProperty("fsym");paramsForCall['params']['tsym']=listsBehaviourWithAPI.getProperty("tsym");if(lastPointTS>-1&&!reset){paramsForCall['params']['lTS']=lastPointTS;}
paramsForCall['params']['types']=listsBehaviourWithAPI.getCSVFilters();return $http.get("/api/timeline/coinget/items/",paramsForCall);};listsBehaviourWithAPI.loadDataFromAPI=function(reset){if(listsBehaviourWithAPI.getProperty("loadMoreAvailable")&&!listsBehaviourWithAPI.getProperty("isLoadingMore")){listsBehaviourWithAPI.setProperty("isLoadingMore",true);listsBehaviourWithAPI.getMoreTimelineEvents(reset).success(function(data){if(data.LoadMoreAvailable){listsBehaviourWithAPI.setProperty("loadMoreAvailable",true);}else{listsBehaviourWithAPI.setProperty("loadMoreAvailable",false);}
listsBehaviourWithAPI.appendTimelineData(data["Data"],reset);listsBehaviourWithAPI.setProperty("isLoadingMore",false);}).error(function(data){listsBehaviourWithAPI.setProperty("loadMoreAvailable",false);listsBehaviourWithAPI.setProperty("isLoadingMore",false);});}};listsBehaviourWithAPI.reloadData=function(){listsBehaviourWithAPI.setProperty('loadMoreAvailable',true);listsBehaviourWithAPI.loadDataFromAPI(true);}
listsBehaviourWithAPI.loadMoreOnScroll=function(){listsBehaviourWithAPI.loadDataFromAPI(false);};return listsBehaviourWithAPI;}]);angular.module('ccc-app').controller('timelineCoinCtrl',['$rootScope','$scope','$stateParams','dateParsing','timelineCoinData','subscriptionManager',function($rootScope,$scope,$stateParams,dateParsing,timelineCoinData,subscriptionManager){var displayCurrency=CCC.STATIC.CURRENCY;$scope.dateParsing=dateParsing;$scope.allData=timelineCoinData;$scope.currentAggInfo={};if($stateParams.hasOwnProperty("Symbol")&&subscriptionManager.getCurrentAGGSubsObj().hasOwnProperty($stateParams.Symbol.toUpperCase())){$scope.currentAggInfo=subscriptionManager.getCurrentAggChartByToSymbol($stateParams.Symbol.toUpperCase());}else{$scope.currentAggInfo=subscriptionManager.getCurrentAggChart();}
timelineCoinData.setProperty('fsym',$scope.currentAggInfo.fromsymbol);timelineCoinData.setProperty('tsym',$scope.currentAggInfo.tosymbol);$scope.toSymbolDisplay=displayCurrency.getSymbol($scope.currentAggInfo.tosymbol);$scope.fromSymbolDisplay=displayCurrency.getSymbol($scope.currentAggInfo.fromsymbol);timelineCoinData.setProperty('loadMoreAvailable',true);timelineCoinData.setProperty('isLoadingMore',false);timelineCoinData.loadDataFromAPI(true);$scope.changeCurrency=$rootScope.$on("ChangeCurrency",function(event,symbol){$scope.currentAggInfo=subscriptionManager.getCurrentAggChartByToSymbol(symbol.toUpperCase());$scope.toSymbolDisplay=displayCurrency.getSymbol($scope.currentAggInfo.tosymbol);timelineCoinData.setProperty('tsym',$scope.currentAggInfo.tosymbol);timelineCoinData.reloadData();});$scope.changeView=$rootScope.$on('ChangeView',function(event,viewChangeParams){$scope.changeCurrency();$scope.changeView();});}]);angular.module('ccc-app').controller('timelineFilterCtrl',['$scope','timelineCoinData',function($scope,timelineCoinData){$scope.allData=timelineCoinData;}]);angular.module('ccc-app').directive('timelineCoin',function(){return{restrict:'E',templateUrl:'lists/timeline-coin.html',controller:'timelineCoinCtrl',scope:{},link:function(scope,element,attrs){}};});angular.module('ccc-app').directive('timelineFilter',function(){return{restrict:'E',templateUrl:'lists/list-filter-top-timeline.html',controller:'timelineFilterCtrl',scope:{},link:function(scope,element,attrs){}};});;;;angular.module('ccc-app').directive('portfolioContainer',function(){return{restrict:'E',templateUrl:'portfolio/container.html',controller:'PortfolioContainerCtrl',scope:{isPublic:"@"},link:function(scope,element,attrs){}};});angular.module('ccc-app').directive('portfolioContainerPublic',function(){return{restrict:'E',templateUrl:'portfolio/container-public.html',controller:'PortfolioContainerCtrl',scope:{isPublic:"@"},link:function(scope,element,attrs){}};});angular.module('ccc-app').directive('portfolioStats',function(){return{restrict:'E',templateUrl:'portfolio/stats.html',controller:'PortfolioStatsCtrl',scope:{currentPortfolio:"="},link:function(scope,element,attrs){}};});angular.module('ccc-app').directive('chartHistoPortfolioSimple',function(){return{restrict:'E',templateUrl:'charts/histo-portfolio-simple.html',controller:'chartHistoPortfolioSimpleCtrl',scope:{currentPortfolio:"=",chartid:'=',},link:function(scope,element,attrs){}};});angular.module('ccc-app').directive('chartHistoPortfolioAdvanced',['chartUtil',function(chartUtil){return{restrict:'E',templateUrl:'charts/histo-portfolio-advanced.html',controller:'chartHistoPortfolioAdvancedCtrl',scope:{currentPortfolio:"=",chartid:'=',},link:function(scope,element,attrs){var generateNewChart=function(){scope.dataIsLoading=true;scope.dataLoaded=false;var exportEnabled=false;var panEventsEnabled=true;scope.chartConfig={type:"serial",theme:"none",legend:{enabled:false},zoomOutText:'',dataProvider:scope.currentDataSet,panEventsEnabled:panEventsEnabled,marginTop:10,marginRight:10,marginLeft:10,marginBottom:30,autoMargins:false,balloon:{adjustBorderColor:false,horizontalPadding:10,verticalPadding:8,color:"#ffffff",borderThickness:2},addClassNames:true,pathToImages:"/images/",categoryField:"timeDate",guides:[],valueAxes:[{axisAlpha:0,position:"left",gridThickness:0,inside:true}],parseDates:true,categoryAxis:{minPeriod:scope.currentPeriod.period,maxSeries:scope.currentDataSet.length+10,parseDates:true,equalSpacing:true,gridThickness:0,labelsEnabled:!panEventsEnabled},graphs:[],chartCursor:{valueBalloonsEnabled:true,zoomable:panEventsEnabled,categoryBalloonEnabled:true,categoryBalloonDateFormat:scope.currentPeriod.format},panelsSettings:{panEventsEnabled:panEventsEnabled,usePrefixes:false},chartScrollbar:{graphType:"line",usePeriod:scope.currentPeriod.period,graph:'base',updateOnReleaseOnly:true,enabled:panEventsEnabled,oppositeAxis:false,backgroundColor:"#444",backgroundAlpha:0.7,graphFillAlpha:0.5,graphLineAlpha:0.5,selectedBackgroundColor:"#ffffff",selectedBackgroundAlpha:0.4,selectedGraphFillAlpha:0,selectedGraphLineAlpha:1,autoGridCount:true,gridAlpha:0,scrollbarHeight:30},export:{enabled:exportEnabled,path:scope.baseImagesPath,drawing:{enabled:false},menu:chartUtil.addDownloadButtonToChart(),menuReviver:function(item,li){if(item.hasOwnProperty("title")){li.setAttribute("title",item.title);}
if(item.hasOwnProperty("idHtml")){li.id=item.idHtml;}
return li;},fileName:scope.currentPeriod.type+'_'+scope.currentType.key+'_'+scope.toSymbol+'_'+scope.currentPeriod.maxPoints+'_'+scope.currentPeriod.aggregation},listeners:[{event:"rendered",method:function(e){scope.dataIsLoading=false;scope.dataLoaded=true;}}]}
if(scope.currentType.key=="DPL"){chartUtil.topPositiveNegativeBarsSerial(scope.chartConfig.graphs,scope.currentPeriod.periodChartTitle+' '+'Profit/Loss','profitloss',scope.currentPortfolio.CurrencyDisplay);}else if(scope.currentType.key=="PP"){chartUtil.topLineSerial(scope.chartConfig.graphs,'Portfolio Performance','performance',scope.currentPortfolio.CurrencyDisplay);}else if(scope.currentType.key=="VT"){chartUtil.topLineSerialVolatility(scope.chartConfig.graphs,'Portfolio Volatility','volatility');}else{chartUtil.topLineSerial(scope.chartConfig.graphs,'Total Portfolio','close',scope.currentPortfolio.CurrencyDisplay);}
scope.chart=AmCharts.makeChart(scope.chartid,scope.chartConfig,500);};var updateBenchMark=function(){if(scope.currentType.key=="PP"){if(scope.chartConfig.graphs.length>1){var graphToRemove=scope.chart.graphs.pop();scope.chart.removeGraph(graphToRemove);}
if(scope.currentBenchmark.name!='None'){var graph=new AmCharts.AmGraph();graph.title='Benchmark Crypto '+scope.currentBenchmark.name;graph.valueField='bm_'+scope.currentBenchmark.name;graph.balloonText="<span style='font-size:12px;'>[[title]]:<br><span style='font-size:16px;'>"+scope.currentPortfolio.CurrencyDisplay+"[[value]]</span></span>";graph.type="line";graph.fillAlphas=0;graph.lineColor='#4cae4c';scope.chart.addGraph(graph);}}}
var updateIndicator=function(){if(scope.currentType.key=="LC"){if(scope.chartConfig.graphs.length>1){var graphToRemove=scope.chart.graphs.pop();scope.chart.removeGraph(graphToRemove);}
scope.chart.categoryAxis.guides=[];scope.chart.validateData();if(scope.currentIndicator.id==='AC'){var graph=new AmCharts.AmGraph();graph.title='Acquisition Cost ';graph.valueField='acquisition';graph.balloonText="<span style='font-size:12px;'>[[title]]:<br><span style='font-size:16px;'>"+scope.currentPortfolio.CurrencyDisplay+"[[value]]</span></span>";graph.type="line";graph.fillAlphas=0;graph.lineColor='#4cae4c';scope.chart.addGraph(graph);}else if(scope.currentIndicator.id==='TA'){var graph=new AmCharts.AmGraph();graph.title='Portfolio Value';graph.valueField='close';graph.balloonFunction=function(graphDataItem,graph){var description=graphDataItem.description;if(description!=undefined){return"<span style='font-size:12px;'>"+description+"</span>";}else{return"";}}
graph.type="line";graph.fillAlphas=0;graph.bulletField='bullet';graph.colorField='bulletColor';graph.descriptionField='bulletDesc';graph.lineColor='#4cae4c';graph.lineThickness=0;graph.bulletSize=12;scope.chart.addGraph(graph);scope.chart.validateData();scope.chart.validateNow();}}}
generateNewChart();scope.$watch('currentDataSet',function(oldValue,newValue){if(newValue){generateNewChart();updateBenchMark();updateIndicator();}});scope.$watch('currentBenchmark',function(oldValue,newValue){if(newValue){updateBenchMark();}});scope.$watch('currentIndicator',function(oldValue,newValue){if(newValue){updateIndicator();}});}};}]);angular.module('ccc-app').directive('chartAnalysisPortfolio',function(){return{restrict:'E',templateUrl:'charts/analysis-portfolio.html',controller:'chartAnalysisPortfolioCtrl',scope:{currentPortfolio:'=',chartid:'=',charttype:'=',},link:function(scope,element,attrs){var generateNewChart=function(){var exportEnabled=false;var panEventsEnabled=false;var currentDataProvider=scope.generateChartData();var titleField="category";var valueField="value";if(scope.charttype==="CryptoSplit"){scope.chartTitle="Crypto Exposure";}else if(scope.charttype==="WalletExchangeSplit"){scope.chartTitle="Wallet/Exchange Exposure";}else if(scope.charttype==="LiquidityExposure"){scope.chartTitle="Liquidity Exposure (Time Until Liquidation)";}else if(scope.charttype==="VolatilityExposure"){scope.chartTitle="Volatility Exposure (Last 30 days)";}
scope.chartConfig={type:"pie",titleField:titleField,valueField:valueField,dataProvider:currentDataProvider,colorField:"color",radius:"30%",pulledField:"pulled",startDuration:0,balloonText:"<span style='font-size:12px;'>[[title]]:<br><span style='font-size:16px;'>"+scope.currentPortfolio.CurrencyDisplay+"[[value]] ([[percents]]%)</span></span>",labelText:"[[title]]",listeners:[{event:"rendered",method:function(e){scope.dataIsLoading=false;scope.dataLoaded=true;}},{event:"clickSlice",method:function(event){var chart=event.chart;if(event.dataItem.dataContext.id!=undefined){scope.selectedSlice=event.dataItem.dataContext.id;}else{scope.selectedSlice=undefined;}
chart.dataProvider=scope.generateChartData();chart.validateData();}}]};scope.chart=AmCharts.makeChart(scope.chartid,scope.chartConfig,500);};generateNewChart();scope.$watch('currentDataSet',function(oldValue,newValue){if(newValue){generateNewChart();}});}};});angular.module('ccc-app').directive('portfolioCoins',function(){return{restrict:'E',templateUrl:'portfolio/coins.html',controller:'PortfolioCoinsCtrl',scope:{currentPortfolio:"="},link:function(scope,element,attrs){}};});angular.module('ccc-app').directive('portfolioAccounting',function(){return{restrict:'E',templateUrl:'portfolio/accounting.html',controller:'PortfolioAccountingCtrl',scope:{currentPortfolio:"="},link:function(scope,element,attrs){}};});;;;